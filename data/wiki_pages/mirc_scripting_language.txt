   }} <!-- not too technical for users of mIRC. Definitely NOT WP:TOOLONG, too long, too long. (lyrics to something). Needs to be prose. -->   | designer               = Khaled Mardam-Bey | developer              = Khaled Mardam-Bey | typing                 = Dynamic typing | implementations        = mIRC AdiIRC  | operating_system       = Microsoft Windows | license                = Proprietary software | website                =  }} Image:MIRC scripts editor.png|thumb|300px| mIRC scripts editor (built-in) The "mIRC scripting language" (often unofficially abbreviated to ""mSL"") is the scripting programming language|scripting language embedded in mIRC, an IRC client for Microsoft Windows|Windows. ==Primary uses== *Channel and personal protection against any types of attacks (flooding, spamming, CTCP floods, etc.). *Dialog windows can be created in mIRC to better serve user-compatibility. **Popular mIRC dialog extensions include MDX ("m"IRC "D"ialog "Ex"tension) and DCX ("D"ialog "C"ontrol "Ex"tension). There are also a few versions of mdx.dll and dcx.dll modded by IRC hackers. *IRC bot|Bots that provide automated IRC channel management, trivia or other games, and other desired functions for chatters. *Commands that save typing or otherwise simplify life on IRC (such as automatically IRC services|identifying as the owner of a nickname). ==Script storage== Scripts are stored as either plain text files, usually with a .mrc file extension, or as INI files. They, however, can be stored with any extension. Multiple script files can be loaded at one time, although in some cases, one script will conflict with another and cause one or both of them to no longer work properly. ==Language features==  mIRC scripting language uses its own nomenclature to refer to language constructs. (However, whilst this can be a little confusing to newcomers, they do not impact on the functionality of mSL.) *Built-in functions are termed "commands" or, if they return a value, "identifiers". *Custom scripted function (computer science)|functions are called "aliases".  Aliases that return a value are known as "custom identifiers". Both are called from the command line or other parts of a script in the same ways as built-in commands and identifiers (and can even supersede them). *"Popups" are scripted context menu items.  Popups are called when they are selected by the user. The term originally referred to the menus—which pop up upon a right click. It is still used this way in the manual.  *Remotes are event handler|event-handling scripts.  Remotes are called when the event they handle occurs. *All variables are dynamic typing|dynamically typed. *Hash tables are available for larger data storage; arrays are not. *mIRC scripts make use of sigil (computer programming)|sigils.  Identifiers (whether custom or built-in) are preceded by <code>$</code>, binary variables are preceded by <code>&</code>, and other variables (whether local or global) are preceded by <code>%</code>.  Commands and aliases are not preceded by any particular character (although when entered from a window's command line they must be preceded by the command prefix, usually <code>/</code>).  *Scripts can read from and write to files )</code> | <code>/write</code> ] The above is intended for singular access to the file. Because each time you issue <code>$read</code> or <code>/write</code> you open and close the file for access. Multiple accesses, during a loop for instance, is best handled through <code>/fopen</code>, <code>/fwrite</code> and <code>/fclose</code>. Since this opens the file only once. In some cases <code>/filter</code> and <code>/savebuf</code> is an even more efficient (non scripted loop) method. *Scripts can also copy and delete files.   *Contain unlimited (8192 bytes prior to mIRC 6.1) raw data *Globally accessible via commands and identifiers *Automatically unset when script returns control to mIRC (and not to another part of a script) *Prefixed with <code>&</code> (e.g. <code>&Variable</code>) *Cannot be accessed other than by <code>/bread</code> and <code>/bwrite</code>, so these variables cannot be passed onto other parts of the script  *May contain unlimited binary data or up to 4,150 (950 prior to mIRC 6.32) bytes of plain text. This limit is imposed by mIRC's scripting parser's own line length limitation (unless assigning a binary variable) *Globally accessible via commands and identifiers *Automatically unset when exiting mIRC as they are only stored in memory *Can be saved for later use *Not prefixed *Faster than accessing from a file, as hash tables are stored in memory rather than the hard disk *Size limited only by the computer's memory limits. *Allows any bucket size to be used  *May contain up to 4,150 (950 prior to mIRC 6.32) bytes of data including its name (however due to line-length limitations in mIRC's scripting parser, a maximum of 4,146 bytes can be assigned explicitly using /set or /var&nbsp;— this number decreasing as the variable's name grows longer) *Cannot store NUL (ASCII 0) or trailing spaces *Globally accessible *Do not automatically unset unless a switch is used (stored automatically in a mIRC initialization file) *Prefixed with <code>%</code> (e.g. <code>%Variable</code>) *Created using the <code>set</code> command or <code>var -g</code> or <code>%Variable = value</code> notation  *May contain up to 4,150 (950 prior to mIRC 6.32) bytes of data including the variable name (however due to line-length limitations in mIRC's scripting parser, a maximum of 4,146 bytes can be assigned explicitly using the /set or /var commands&nbsp;— this number decreasing as the variable's name grows longer) *Can store NUL (ASCII 0) or trailing spaces *Are destroyed when the triggered alias or event ends *Prefixed with <code>%</code> (e.g. <code>%Variable</code>) *Created using the <code>var</code> command. <code>var</code> is merely an internal alias for <code>set -l</code> but <code>var</code> poses the means to declare multiple local variables on a single line (e.g. <code>var %a = 1, %b, %c = 2</code>) ==Limitations== *Scripting parser supports a maximum of 8,292 (950 prior to mIRC 6.32) characters per line (not including newlines or indentation). *Strings are not syntactically enclosed, creating ambiguities in code where characters meant as literal strings are treated as part of the language's syntax. *Each line of code is broken down into a set of space-delimited tokens. As mIRC's parser does not support null tokens and the language doesn't provide a syntax to clearly differentiate literal strings from code; Prior to mIRC version 6.2 it was impossible to pass multiple consecutive spaces to any command or alias. However, this was fixed with the introduction of the returnex command which allows the preservation of spaces. ==Code examples== The code below is in the remote scripts format. If placed into an alias file, the command names should not be preceded by the word "<code>alias</code>". Test Comments include the common <code>/* comment */</code> and <code>;comment</code>. Here is an example of a Hello World alias: <pre> ;Defines the alias 'hello' in the remote script ;Note: if this is placed in an alias script, ;the 'alias' part must be removed (result: hello {) ;Usage: /hello alias hello {   ;Displays(/echo) 'Hello World!' into the active window(-a)   echo -a Hello World! } </pre> A remote script to automatically respond to certain text <pre> ;Placed in a remote script ;When a user types Hello! in a channel, ;you answer back: Hello, ! on *:TEXT:Hello!:#:{ msg $chan Hello, $nick $+ ! } ;When a user types Hello! in a private message, ;you answer back: Hello, ! on *:TEXT:Hello!:?: { msg $nick Hello, $nick $+ ! } ;Here is a script which automatically gives voice to a user ;who joins a particular channel (The Bot or user should have HOP) on *:JOIN:#?: { mode $chan +v $nick } ;A bad word script on *:Text:die*:#: { .mode $chan +b $nick | kick $chan $nick Dont say that again } </pre> ==See also== * Internet Relay Chat * mIRC ==References==  <!-- This are discussions in several books of the mIRC scripting language. Notable over a period of years. To be converted to inline citations.--> * Smith, Chris. (2004). . Paul Mutton, ed. O'Reilly Media, Inc. pp.&nbsp;71–74. "(In-depth example of script features and usage)" * Jose Nazario (2004). Artech House, 2004. p.&nbsp;53, 55. "(Discusses 1997 mIRC script attack.)" *Ken Dunham, Jim Melnick (2008) . CRC Press. p.&nbsp;7-31. "(In-depth analysis/reverse engineering of mIRC-script-based malware bot)" * Peter Szor (2005). . Pearson Education. Ch. 3.7.7. * David Harley, Robert S. Vibert (2007). .  Elsevier. p.&nbsp;147. (usage in script attacks) *Esharenana E. Adomi (2008). .  Idea Group Inc (IGI). p.&nbsp;173. *Markus Jakobsson, Zulfikar Ramzan. (2008). . Addison-Wesley Professional. p.&nbsp;194. ==External links==  <!--=====--> *  *  * &nbsp;— A Wiki-based user-maintained help reference primarily for mIRC scripting * &nbsp;— Turkish/English mIRC Scripting Help unofficial   Category:Scripting languages sv:Mirc#MSL (mIRC Scripting Language)
