  A "game programmer" is a software engineer, programmer, or computer scientist who primarily develops codebases for video games or related software, such as game development tools. Game programming has many specialized disciplines, all of which fall under the umbrella term of "game programmer".#Bates|Bates 2004, pp. 165-192.168.11 cc1#MoNov|Moore, Novak 2010, pp. 78-84 A game programmer should not be confused with a Video game designer|game designer, who works on Video game design|game design.#MoNov|Moore, Novak 2010, pp. 74-75 == History == File:Apple iie.jpg|thumb|The Apple II family|Apple II series was a popular video game platform during the early home computer era.  Despite being outperformed by later systems, it remained popular until the early 1990s. In the early days of video games (from the early 1970s to mid-1980s), a game programmer also took on the job of a designer and Game art design|artist. This was generally because the abilities of early computers were so limited that having specialized personnel for each function was unnecessary. Game concepts were generally light and games were only meant to be played for a few minutes at a time, but more importantly, art content and variations in gameplay were constrained by computers' limited power. Later, as specialized arcade game|arcade hardware and home computer|home systems became more powerful, game developers could develop deeper storylines and could include such features as high-resolution and full color graphics, physics, advanced artificial intelligence and digital sound. Technology has advanced to such a great degree that contemporary games usually boast 3D computer graphics|3D graphics and full motion video using assets developed by professional graphic artists.  Nowadays, the derogatory term "programmer art" has come to imply the kind of bright colors and blocky design that were typical of early video games. The desire for adding more depth and assets to games necessitated a division of labor. Initially, art production was relegated to Game art design|full-time artists.  Next game programming became a separate discipline from game design. Now, only some games, such as the puzzle game "Bejeweled", are simple enough to require just one full-time programmer.  Despite this division, however, most game developers (artists, programmers and even game producer|producers) have some say in the final design of contemporary games. == Disciplines == A contemporary video game may include advanced physics, artificial intelligence, 3D graphics, digitised sound, an original musical score, complex strategy and may use several input devices (such as computer mouse|mice, computer keyboard|keyboards, gamepads and joysticks) and may be playable against other people via the Internet or over a LAN. Each aspect of the game can consume all of one programmer's time and, in many cases, several programmers. Some programmers may specialize in one area of game programming, but many are familiar with several aspects. The number of programmers needed for each feature depends somewhat on programmers' skills, but mostly are dictated by the type of game being developed.  Game engine programmers create the base engine of the game, including the simulated physics and graphics disciplines.#MoNov|Moore, Novak 2010, p. 79 Increasingly, video games use existing game engines, either List of game engines|commercial, open source or free. They are often customized for a particular game, and these programmers handle these modifications. = A game's physics programmer is dedicated to developing the physics a game will employ.#MoNov|Moore, Novak 2010, p. 80 Typically, a game will only simulate a few aspects of real-world physics. For example, a space game may need simulated gravity, but would not have any need for simulating water viscosity. Since processing cycles are always at a premium, physics programmers may employ "shortcuts" that are computationally inexpensive, but look and act "good enough" for the game in question. In other cases, unrealistic physics are employed to allow easier gameplay or for dramatic effect. Sometimes, a specific subset of situations is specified and the physical outcome of such situations are stored in a record of some sort and are never computed at runtime at all. Some physics programmers may even delve into the difficult tasks of inverse kinematics and other motions attributed to game characters, but increasingly these motions are assigned via motion capture libraries so as not to overload the Central processing unit|CPU with complex calculations. = Historically, this title usually belonged to a programmer who developed specialized bit blit|blitter algorithms and clever optimizations for 2D computer graphics|2D graphics. Today, however, it is almost exclusively applied to programmers who specialize in developing and modifying complex 3D graphic renderers. Some 2D graphics skills have just recently become useful again, though, for developing games for the new generation of cell phones and handheld game consoles. A 3D graphics programmer must have a firm grasp of advanced mathematical concepts such as vector (geometry)|vector and matrix (mathematics)|matrix math, quaternions and linear algebra. Skilled programmers specializing in this area of game development can demand high wages and are usually a scarce commodity. Their skills can be used for video games on any computing platform|platform.  An AI programmer develops the logic of time to simulate intelligence in enemies and opponents.#MoNov|Moore, Novak 2010, pp. 80-81 It has recently evolved into a specialized discipline, as these tasks used to be implemented by programmers who specialized in other areas. An AI programmer may program pathfinding, strategy and enemy tactic systems. This is one of the most challenging aspects of game programming and its sophistication is developing rapidly.  Contemporary games dedicate approximately 10 to 20 percent of their programming staff to AI. Some games, such as strategy games like "Civilization III" or role-playing video games such as "The Elder Scrolls IV: Oblivion", use AI heavily, while others, such as puzzle games, use it sparingly or not at all.  Many game developers have created entire programming language|languages that can be used to program their own AI for games via scripting programming language|scripts. These languages are typically less technical than the language used to implement the game, and will often be used by the game or level designers to implement the world of the game. Many studios also make their games' scripting available to players, and it is often used extensively by third party mod (computer gaming)|mod developers. The game artificial intelligence|AI technology used in games programming should not be confused with artificial intelligence|academic AI programming and research. Although both areas do borrow from each other, they are usually considered distinct disciplines, though there are exceptions. For example, the 2001 game by Lionhead Studios "Black & White (video game)|Black & White" features a unique AI approach to a user controlled Black & White (video game)#Creature|creature who uses learning to model behaviors during game-play.#AIW1|Evans 2002, Chapter 11.2: Varieties of Learning, pp.567-578 In recent years, more effort has been directed towards intervening promising fields of AI research and game AI programming.  Not always a separate discipline, sound programming has been a mainstay of game programming since the days of "Pong". Most games make use of audio, and many have a full musical score.  Computer audio games eschew graphics altogether and use sound as their primary feedback mechanism.#MoNov|Moore, Novak 2010, p. 83 Many games use advanced techniques such as surround sound|3D positional sound, making audio programming a non-trivial matter. With these games, one or two programmers may dedicate all their time to building and refining the game's sound engine, and sound programmers may be trained or have a formal background in digital signal processing. Scripting tools are often created or maintained by sound programmers for use by sound designers. These tools allow designers to associate sounds with characters, actions, objects and events while also assigning music or atmospheric sounds for game environments (levels or areas) and setting environmental variables such as reverberation.  Though all programmers add to the content and experience that a game provides, a gameplay programmer focuses more on a game's strategy, implementation of the game's mechanics and logic,  and the "feel" of a game. This is usually not a separate discipline, as what this programmer does usually differs from game to game, and they will inevitably be involved with more specialized areas of the game's development such as graphics or sound. This programmer may implement strategy tables, tweak input code, or adjust other factors that alter the game. Many of these aspects may be altered by programmers who specialize in these areas, however (for example, strategy tables may be implemented by AI programmers).  In early video games, gameplay programmers would write code to create all the content in the gameâ€”if the player was supposed to shoot a particular enemy, and a red key was supposed to appear along with some text on the screen, then this functionality was all written as part of the core program in C (programming language)|C or assembly language by a gameplay programmer. More often today the core game engine is usually separated from gameplay programming. This has several development advantages. The game engine deals with graphics rendering, sound, physics and so on while a scripting language deals with things like cinematic events, enemy behavior and game objectives. Large game projects can have a team of scripters to implement these sorts of game content. Scripters usually are also game designers. It is often easier to find a qualified game designer who can be taught a script language as opposed to finding a qualified game designer who has mastered C++.  This programmer specializes in programming user interfaces (UIs) for games.#MoNov|Moore, Novak 2010, p. 81 Though some games have custom user interfaces, this programmer is more likely to develop a library (software)|library that can be used across multiple projects. Most UIs look 2D, though contemporary UIs usually use the same 3D technology as the rest of the game so some knowledge of 3D math and systems is helpful for this role. Advanced UI systems may allow scripting and special effects, such as transparency, animation or particle effects for the controls.  File:Joystick.jpg|thumb|250px|The joystick was the primary input device for 1980s era games.  Now game programmers must account for a wide range of input devices, but the joystick today is supported in relatively few games, though still dominant for flight simulators. Input programming, while usually not a job title, or even a full-time position on a particular game project, is still an important task.  This programmer writes the code specifying how input devices such as a Computer keyboard|keyboard, mouse or joystick affect the game. These routines are typically developed early in production and are continually tweaked during development. Normally, one programmer does not need to dedicate his entire time to developing these systems. A real-time motion-controlled game utilizing devices such as the Wii Remote or Kinect may need a very complex and low latency input system, while the Human interface device|HID requirements of a mouse-driven turn-based strategy game such as "Heroes of Might and Magic" are significantly simpler to implement.  This programmer writes code that allows players to compete or cooperate, connected via a LAN or the Internet (or in rarer cases, directly connected via modem).#MoNov|Moore, Novak 2010, p. 82 Programmers implementing these game features can spend all their time in this one role, which is often considered one of the most technically challenging. Lag (video games)|Network latency, packet compression, and dropped or interrupted connections are just a few of the concerns one must consider. Although multi-player features can consume the entire production timeline and require the other engine systems to be designed with networking in mind, network systems are often put off until the last few months of development, adding additional difficulties to this role.  Some titles have had their online features (often considered lower priority than the core gameplay) cut months away from release due to concerns such as lack of management, design forethought, or scalability. "Virtua Fighter 5" for the PlayStation 3|PS3 is a notable example of this trend.   The tools programmer#MoNov|Moore, Novak 2010, p. 78 can assist the development of a game by writing custom tools for it.  Game development tool|Game development Tools often contain features such as script compilation, importing or converting art assets, and level editing. While some tools used may be Commercial off-the-shelf|COTS products such as an Integrated development environment|IDE or a graphics editor, tools programmers create tools with specific functions tailored to a specific game which are not available in commercial products. For example, an adventure game developer migh ...
