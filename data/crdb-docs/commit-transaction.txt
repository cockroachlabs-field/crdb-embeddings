   Link: canonical
   Cockroach Labs
   Products
   Products CockroachDB CockroachCloud Compare Products Pricing
   Capabilities SQL Scale Resilience Geo-Partitioning Cloud Native
   Customers
   Learn
   Docs University
   Resources
   Guides Videos & Webinars Partners Forum
   Blog Get CockroachDB Contact Us
   Cockroach Labs
   Products
   Products CockroachDB CockroachCloud Compare Products Pricing
   Capabilities SQL Scale Resilience Geo-Partitioning Cloud Native
   Customers
   Learn
   Docs University
   Resources
   Guides Videos & Webinars Partners Forum
   Blog Get CockroachDB Contact Us

                                     COMMIT

   Contribute 
     * Edit This Page
     * Report Doc Issue
     * Suggest New Content

   The COMMIT statement commits the current transaction or, when using
   advanced client-side transaction retries, clears the connection to allow
   new transactions to begin.

   When using advanced client-side transaction retries, statements issued
   after SAVEPOINT are committed when RELEASE SAVEPOINT is issued instead of
   COMMIT. However, you must still issue a COMMIT statement to clear the
   connection for the next transaction.

   For non-retryable transactions, if statements in the transaction generated
   any errors, COMMIT is equivalent to ROLLBACK, which aborts the transaction
   and discards all updates made by its statements.

Synopsis

   COMMIT END TRANSACTION

Required privileges

   No privileges are required to commit a transaction. However, privileges
   are required for each statement within a transaction.

Aliases

   In CockroachDB, END is an alias for the COMMIT statement.

Example

  Commit a transaction

   How you commit transactions depends on how your application handles
   transaction retries.

    Client-side retryable transactions

   When using advanced client-side transaction retries, statements are
   committed by RELEASE SAVEPOINT. COMMIT itself only clears the connection
   for the next transaction.

   copy

 > BEGIN;

   copy

 > SAVEPOINT cockroach_restart;

   copy

 > UPDATE products SET inventory = 0 WHERE sku = '8675309';

   copy

 > INSERT INTO orders (customer, sku, status) VALUES (1001, '8675309', 'new');

   copy

 > RELEASE SAVEPOINT cockroach_restart;

   copy

 > COMMIT;

   Warning:
   This example assumes you're using client-side intervention to handle
   transaction retries.

    Automatically retried transactions

   If you are using transactions that CockroachDB will automatically retry
   (i.e., all statements sent in a single batch), commit the transaction with
   COMMIT.

   copy

 > BEGIN; UPDATE products SET inventory = 100 WHERE = '8675309'; UPDATE products SET inventory = 100 WHERE = '8675310'; COMMIT;

See also

     * Transactions
     * BEGIN
     * RELEASE SAVEPOINT
     * ROLLBACK
     * SAVEPOINT
     * SHOW SAVEPOINT STATUS

   Was this page helpful?

   Yes No
     * Product
          * CockroachDB
          * CockroachCloud
          * Compare
          * Pricing
          * What's New
          * Get CockroachDB
          * Sign In
     * Resources
          * Guides
          * Videos & Webinars
          * Architecture Overview
          * FAQ
          * Security
     * Learn
          * Docs
          * University
     * Support Channels
          * Forum
          * Slack
          * Support Portal
          * Contact Us
     * Company
          * About
          * Blog
          * Careers
          * Customers
          * Events
          * News
          * Privacy
   Â© 2020 Cockroach Labs
   Thank you for downloading CockroachDB
   Keep up-to-date with CockroachDB software releases and usage best
   practices
   Keep up-to-date with CockroachDB software releases and usage best
   practices
