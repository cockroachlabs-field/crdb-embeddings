   Link: canonical
   Cockroach Labs
   Products
   Products CockroachDB CockroachCloud Compare Products Pricing
   Capabilities SQL Scale Resilience Geo-Partitioning Cloud Native
   Customers
   Learn
   Docs University
   Resources
   Guides Videos & Webinars Partners Forum
   Blog Get CockroachDB Contact Us
   Cockroach Labs
   Products
   Products CockroachDB CockroachCloud Compare Products Pricing
   Capabilities SQL Scale Resilience Geo-Partitioning Cloud Native
   Customers
   Learn
   Docs University
   Resources
   Guides Videos & Webinars Partners Forum
   Blog Get CockroachDB Contact Us

                            TIMESTAMP / TIMESTAMPTZ

   Contribute 
     * Edit This Page
     * Report Doc Issue
     * Suggest New Content

   The TIMESTAMP and TIMESTAMPTZ data types store a date and time pair in
   UTC.

Variants

   TIMESTAMP has two variants:

     * TIMESTAMP presents all TIMESTAMP values in UTC.

     * TIMESTAMPTZ converts TIMESTAMP values from UTC to the client's session
       time zone (unless another time zone is specified for the value).
       However, it is conceptually important to note that TIMESTAMPTZ does
       not store any time zone data.

       Note:

       The default session time zone is UTC, which means that by default
       TIMESTAMPTZ values display in UTC.

   The difference between these two variants is that TIMESTAMPTZ uses the
   client's session time zone, while the other simply does not. This behavior
   extends to functions like now() and extract() on TIMESTAMPTZ values.

   You can use the timezone() and AT TIME ZONE functions to convert a
   TIMESTAMPTZ into a TIMESTAMP at a specified timezone, or to convert a
   TIMESTAMP into a TIMESTAMPTZ at a specified timezone.

Best practices

   We recommend always using the TIMESTAMPTZ variant because the TIMESTAMP
   variant can sometimes lead to unexpected behaviors when it ignores a
   session offset. However, we also recommend you avoid setting a session
   time zone offset for your database.

Aliases

   In CockroachDB, the following are aliases:

     * TIMESTAMP, TIMESTAMP WITHOUT TIME ZONE
     * TIMESTAMPTZ, TIMESTAMP WITH TIME ZONE

Syntax

   A constant value of type TIMESTAMP/TIMESTAMPTZ can be expressed using an
   interpreted literal, or a string literal annotated with type
   TIMESTAMP/TIMESTAMPTZ or coerced to type TIMESTAMP/TIMESTAMPTZ.

   TIMESTAMP constants can be expressed using the following string literal
   formats:

   Format        Example                                
   Date only     TIMESTAMP '2016-01-25'                 
   Date and Time TIMESTAMP '2016-01-25 10:10:10.555555' 
   ISO 8601      TIMESTAMP '2016-01-25T10:10:10.555555' 

   To express a TIMESTAMPTZ value (with time zone offset from UTC), use the
   following format: TIMESTAMPTZ '2016-01-25 10:10:10.555555-05:00'

   When it is unambiguous, a simple unannotated string literal can also be
   automatically interpreted as type TIMESTAMP or TIMESTAMPTZ.

   Note that the fractional portion is optional and is rounded to
   microseconds (6 digits after decimal) for compatibility with the
   PostgreSQL wire protocol.

   Note:

   A time zone offset of +00:00 is displayed for all TIME and TIMESTAMP
   values, but is not stored in the database.

Size

   A TIMESTAMP/TIMESTAMPTZ column supports values up to 12 bytes in width,
   but the total storage size is likely to be larger due to CockroachDB
   metadata.

Precision

   CockroachDB supports precision levels from 0 (seconds) to 6 (microseconds)
   for TIMESTAMP/TIMESTAMPTZ values. Precision in time values specifies the
   number of fractional digits retained in the seconds field. For example,
   specifying a TIMESTAMPTZ value as TIMESTAMPTZ(3) truncates the time
   component to milliseconds. By default, TIMESTAMP/TIMESTAMPTZ values have a
   precision of 6 (microseconds).

   You can use an ALTER COLUMN ... SET DATA TYPE statement to change the
   precision level of a TIMESTAMP/TIMESTAMPTZ-typed column. If there is
   already a non-default precision level specified for the column, the
   precision level can only be changed to an equal or greater precision
   level. For an example, see Create a table with a TIMESTAMP-typed column,
   with precision.

   Note:

   If you downgrade to a version of CockroachDB that does not support
   precision for TIMESTAMP/TIMESTAMPTZ values, all TIMESTAMP/TIMESTAMPTZ
   values previously specified with precision will be stored with full
   precision.

Examples

  Create a table with a TIMESTAMPTZ-typed column

   copy

 > CREATE TABLE timestamps (a INT PRIMARY KEY, b TIMESTAMPTZ);

   copy

 > SHOW COLUMNS FROM timestamps;

   column_name |  data_type  | is_nullable | column_default | generation_expression |  indices  | is_hidden
 +-------------+-------------+-------------+----------------+-----------------------+-----------+-----------+
   a           | INT8        |    false    | NULL           |                       | {primary} |   false
   b           | TIMESTAMPTZ |    true     | NULL           |                       | {}        |   false
 (2 rows)

   copy

 > INSERT INTO timestamps VALUES (1, TIMESTAMPTZ '2016-03-26 10:10:10-05:00'), (2, TIMESTAMPTZ '2016-03-26');

   copy

 > SELECT * FROM timestamps;

   a |             b
 +---+---------------------------+
   1 | 2016-03-26 15:10:10+00:00
   2 | 2016-03-26 00:00:00+00:00
 (2 rows)

  Create a table with a TIMESTAMP-typed column, with precision

   copy

 > CREATE TABLE timestamps (a INT PRIMARY KEY, b TIMESTAMP(3));

   copy

 > SHOW COLUMNS FROM timestamps;

   column_name |  data_type   | is_nullable | column_default | generation_expression |  indices  | is_hidden
 --------------+--------------+-------------+----------------+-----------------------+-----------+------------
   a           | INT8         |    false    | NULL           |                       | {primary} |   false
   b           | TIMESTAMP(3) |    true     | NULL           |                       | {}        |   false
 (2 rows)

   copy

 > INSERT INTO timestamps VALUES (1, TIMESTAMP '2020-03-25 12:00:00.123456'), (2, TIMESTAMP '2020-03-26 4:00:00.123456');

   copy

 > SELECT * FROM timestamps;

   a |               b
 ----+--------------------------------
   1 | 2020-03-25 12:00:00.123+00:00
   2 | 2020-03-26 04:00:00.123+00:00
 (2 rows)

   To change the precision level of a column, you can use an ALTER COLUMN ...
   SET DATA TYPE statement:

   copy

 > ALTER TABLE timestamps ALTER COLUMN b SET DATA TYPE TIMESTAMP(4);

 ALTER TABLE

   copy

 > SHOW COLUMNS FROM timestamps;

   column_name |  data_type   | is_nullable | column_default | generation_expression |  indices  | is_hidden
 --------------+--------------+-------------+----------------+-----------------------+-----------+------------
   a           | INT8         |    false    | NULL           |                       | {primary} |   false
   b           | TIMESTAMP(4) |    true     | NULL           |                       | {}        |   false
 (2 rows)

   When changing precision level, TIMESTAMP can be changed to TIMESTAMPTZ,
   and TIMESTAMPTZ can be changed to TIMESTAMP:

   copy

 > ALTER TABLE timestamps ALTER COLUMN b SET DATA TYPE TIMESTAMPTZ(5);

 ALTER TABLE

   copy

 > SHOW COLUMNS FROM timestamps;

   column_name |   data_type    | is_nullable | column_default | generation_expression |  indices  | is_hidden
 --------------+----------------+-------------+----------------+-----------------------+-----------+------------
   a           | INT8           |    false    | NULL           |                       | {primary} |   false
   b           | TIMESTAMPTZ(5) |    true     | NULL           |                       | {}        |   false
 (2 rows)

   Note:

   If a non-default precision level has already been specified, you cannot
   change the precision to a lower level.

   In this case, the b column, which is of type TIMESTAMPTZ(5), cannot be
   changed to a precision level below 5:

   copy

 > ALTER TABLE timestamps ALTER COLUMN b SET DATA TYPE TIMESTAMPTZ(3);

 ERROR: unimplemented: type conversion from TIMESTAMPTZ(5) to TIMESTAMPTZ(3) requires overwriting existing values which is not yet implemented
 SQLSTATE: 0A000

Supported casting and conversion

   TIMESTAMP values can be cast to any of the following data types:

   Type    Details                                                            
           Converts to number of seconds since the Unix epoch (Jan. 1, 1970). 
   DECIMAL This is a CockroachDB experimental feature which may be changed    
           without notice.                                                    
           Converts to number of seconds since the Unix epoch (Jan. 1, 1970). 
   FLOAT   This is a CockroachDB experimental feature which may be changed    
           without notice.                                                    
   TIME    Converts to the time portion (HH:MM:SS) of the timestamp.          
           Converts to number of seconds since the Unix epoch (Jan. 1, 1970). 
   INT     This is a CockroachDB experimental feature which may be changed    
           without notice.                                                    
   DATE    --                                                                 
   STRING  --                                                                 

See also

   Data Types

   Was this page helpful?

   Yes No
     * Product
          * CockroachDB
          * CockroachCloud
          * Compare
          * Pricing
          * What's New
          * Get CockroachDB
          * Sign In
     * Resources
          * Guides
          * Videos & Webinars
          * Architecture Overview
          * FAQ
          * Security
     * Learn
          * Docs
          * University
     * Support Channels
          * Forum
          * Slack
          * Support Portal
          * Contact Us
     * Company
          * About
          * Blog
          * Careers
          * Customers
          * Events
          * News
          * Privacy
   © 2020 Cockroach Labs
   Thank you for downloading CockroachDB
   Keep up-to-date with CockroachDB software releases and usage best
   practices
   Keep up-to-date with CockroachDB software releases and usage best
   practices
