   Link: canonical
   Cockroach Labs
   Products
   Products CockroachDB CockroachCloud Compare Products Pricing
   Capabilities SQL Scale Resilience Geo-Partitioning Cloud Native
   Customers
   Learn
   Docs University
   Resources
   Guides Videos & Webinars Partners Forum
   Blog Get CockroachDB Contact Us
   Cockroach Labs
   Products
   Products CockroachDB CockroachCloud Compare Products Pricing
   Capabilities SQL Scale Resilience Geo-Partitioning Cloud Native
   Customers
   Learn
   Docs University
   Resources
   Guides Videos & Webinars Partners Forum
   Blog Get CockroachDB Contact Us

                            Functions and Operators

   Contribute 
     * Edit This Page
     * Report Doc Issue
     * Suggest New Content

   CockroachDB supports the following SQL functions and operators for use in
   scalar expressions.

   Tip:
   In the built-in SQL shell, use \hf [function] to get inline help about a
   specific function.

Special syntax forms

   The following syntax forms are recognized for compatibility with the SQL
   standard and PostgreSQL, but are equivalent to regular built-in functions:

   Special form                           Equivalent to                       
   AT TIME ZONE                           timezone()                          
   CURRENT_CATALOG                        current_catalog()                   
   COLLATION FOR                          pg_collation_for()                  
   CURRENT_DATE                           current_date()                      
   CURRENT_ROLE                           current_user()                      
   CURRENT_SCHEMA                         current_schema()                    
   CURRENT_TIMESTAMP                      current_timestamp()                 
   CURRENT_TIME                           current_time()                      
   CURRENT_USER                           current_user()                      
   EXTRACT(<part> FROM <value>)           extract("<part>", <value>)          
   EXTRACT_DURATION(<part> FROM <value>)  extract_duration("<part>", <value>) 
   OVERLAY(<text1> PLACING <text2> FROM   overlay(<text1>, <text2>, <int1>,   
   <int1> FOR <int2>)                     <int2>)                             
   OVERLAY(<text1> PLACING <text2> FROM   overlay(<text1>, <text2>, <int>)    
   <int>)                                 
   POSITION(<text1> IN <text2>)           strpos(<text2>, <text1>)            
   SESSION_USER                           current_user()                      
   SUBSTRING(<text> FOR <int1> FROM       substring(<text>, <int2>, <int1>)   
   <int2>)                                
   SUBSTRING(<text> FOR <int>)            substring(<text>, 1, <int>)         
   SUBSTRING(<text> FROM <int1> FOR       substring(<text>, <int1>, <int2>)   
   <int2>)                                
   SUBSTRING(<text> FROM <int>)           substring(<text>, <int>)            
   TRIM(<text1> FROM <text2>)             btrim(<text2>, <text1>)             
   TRIM(<text1>, <text2>)                 btrim(<text1>, <text2>)             
   TRIM(FROM <text>)                      btrim(<text>)                       
   TRIM(LEADING <text1> FROM <text2>)     ltrim(<text2>, <text1>)             
   TRIM(LEADING FROM <text>)              ltrim(<text>)                       
   TRIM(TRAILING <text1> FROM <text2>)    rtrim(<text2>, <text1>)             
   TRIM(TRAILING FROM <text>)             rtrim(<text>)                       
   USER                                   current_user()                      

Conditional and function-like operators

   The following table lists the operators that look like built-in functions
   but have special evaluation rules:

   Operator           Description                                   
   ANNOTATE_TYPE(...) Explicitly Typed Expression                   
   ARRAY(...)         Conversion of Subquery Results to An Array    
   ARRAY[...]         Conversion of Scalar Expressions to An Array  
   CAST(...)          Type Cast                                     
   COALESCE(...)      First non-NULL expression with Short Circuit  
   EXISTS(...)        Existence Test on the Result of Subqueries    
   IF(...)            Conditional Evaluation                        
   IFNULL(...)        Alias for COALESCE restricted to two operands 
   NULLIF(...)        Return NULL conditionally                     
   ROW(...)           Tuple Constructor                             

Built-in functions

  Array functions

   Function → Returns                   Description                           
   array_append(array: bool[], elem:    Appends elem to array, returning the  
   bool) → bool[]                       result.                               
   array_append(array: bytes[], elem:   Appends elem to array, returning the  
   bytes) → bytes[]                     result.                               
   array_append(array: date[], elem:    Appends elem to array, returning the  
   date) → date[]                       result.                               
   array_append(array: decimal[], elem: Appends elem to array, returning the  
   decimal) → decimal[]                 result.                               
   array_append(array: float[], elem:   Appends elem to array, returning the  
   float) → float[]                     result.                               
   array_append(array: inet[], elem:    Appends elem to array, returning the  
   inet) → inet[]                       result.                               
   array_append(array: int[], elem:     Appends elem to array, returning the  
   int) → int[]                         result.                               
   array_append(array: interval[],      Appends elem to array, returning the  
   elem: interval) → interval[]         result.                               
   array_append(array: string[], elem:  Appends elem to array, returning the  
   string) → string[]                   result.                               
   array_append(array: time[], elem:    Appends elem to array, returning the  
   time) → time[]                       result.                               
   array_append(array: timestamp[],     Appends elem to array, returning the  
   elem: timestamp) → timestamp[]       result.                               
   array_append(array: timestamptz[],   Appends elem to array, returning the  
   elem: timestamptz) → timestamptz[]   result.                               
   array_append(array: uuid[], elem:    Appends elem to array, returning the  
   uuid) → uuid[]                       result.                               
   array_append(array: geography[],     Appends elem to array, returning the  
   elem: geography) → geography[]       result.                               
   array_append(array: geometry[],      Appends elem to array, returning the  
   elem: geometry) → geometry[]         result.                               
   array_append(array: oid[], elem:     Appends elem to array, returning the  
   oid) → oid[]                         result.                               
   array_append(array: timetz[], elem:  Appends elem to array, returning the  
   timetz) → timetz[]                   result.                               
   array_append(array: varbit[], elem:  Appends elem to array, returning the  
   varbit) → varbit[]                   result.                               
   array_cat(left: bool[], right:       Appends two arrays.                   
   bool[]) → bool[]                     
   array_cat(left: bytes[], right:      Appends two arrays.                   
   bytes[]) → bytes[]                   
   array_cat(left: date[], right:       Appends two arrays.                   
   date[]) → date[]                     
   array_cat(left: decimal[], right:    Appends two arrays.                   
   decimal[]) → decimal[]               
   array_cat(left: float[], right:      Appends two arrays.                   
   float[]) → float[]                   
   array_cat(left: inet[], right:       Appends two arrays.                   
   inet[]) → inet[]                     
   array_cat(left: int[], right: int[]) Appends two arrays.                   
   → int[]                              
   array_cat(left: interval[], right:   Appends two arrays.                   
   interval[]) → interval[]             
   array_cat(left: string[], right:     Appends two arrays.                   
   string[]) → string[]                 
   array_cat(left: time[], right:       Appends two arrays.                   
   time[]) → time[]                     
   array_cat(left: timestamp[], right:  Appends two arrays.                   
   timestamp[]) → timestamp[]           
   array_cat(left: timestamptz[],                                             
   right: timestamptz[]) →              Appends two arrays.
   timestamptz[]                        
   array_cat(left: uuid[], right:       Appends two arrays.                   
   uuid[]) → uuid[]                     
   array_cat(left: geography[], right:  Appends two arrays.                   
   geography[]) → geography[]           
   array_cat(left: geometry[], right:   Appends two arrays.                   
   geometry[]) → geometry[]             
   array_cat(left: oid[], right: oid[]) Appends two arrays.                   
   → oid[]                              
   array_cat(left: timetz[], right:     Appends two arrays.                   
   timetz[]) → timetz[]                 
   array_cat(left: varbit[], right:     Appends two arrays.                   
   varbit[]) → varbit[]                 
                                        Calculates the length of input on the 
   array_length(input: anyelement[],    provided array_dimension. However,    
   array_dimension: int) → int          because CockroachDB doesn’t yet       
                                        support multi-dimensional arrays, the 
                                        only supported array_dimension is 1.  
                                        Calculates the minimum value of input 
                                        on the provided array_dimension.      
   array_lower(input: anyelement[],     However, because CockroachDB doesn’t  
   array_dimension: int) → int          yet support multi-dimensional arrays, 
                                        the only supported array_dimension is 
                                        1.                                    
   array_position(array: bool[], elem:  Return the index of the first         
   bool) → int                          occurrence of elem in array.          
   array_position(array: bytes[], elem: Return the index of the first         
   bytes) → int                         occurrence of elem in array.          
   array_position(array: date[], elem:  Return the index of the first         
   date) → int                          occurrence of elem in array.          
   array_position(array: decimal[],     Return the index of the first         
   elem: decimal) → int                 occurrence of elem in array.          
   array_position(array: float[], elem: Return the index of the first         
   float) → int                         occurrence of elem in array.          
   array_position(array: inet[], elem:  Return the index of the first         
   inet) → int                          occurrence of elem in array.          
   array_position(array: int[], elem:   Return the index of the first         
   int) → int                           occurrence of elem in array.          
   array_position(array: interval[],    Return the index of the first         
   elem: interval) → int                occurrence of elem in array.          
   array_position(array: string[],      Return the index of the first         
   elem: string) → int                  occurrence of elem in array.          
   array_position(array: time[], elem:  Return the index of the first         
   time) → int                          occurrence of elem in array.          
   array_position(array: timestamp[],   Return the index of the first         
   elem: timestamp) → int               occurrence of elem in array.          
   array_position(array: timestamptz[], Return the index of the first         
   elem: timestamptz) → int             occurrence of elem in array.          
   array_position(array: uuid[], elem:  Return the index of the first         
   uuid) → int                          occurrence of elem in array.          
   array_position(array: geography[],   Return the index of the first         
   elem: geography) → int               occurrence of elem in array.          
   array_position(array: geometry[],    Return the index of the first         
   elem: geometry) → int                occurrence of elem in array.          
   array_position(array: oid[], elem:   Return the index of the first         
   oid) → int                           occurrence of elem in array.          
   array_position(array: timetz[],      Return the index of the first         
   elem: timetz) → int                  occurrence of elem in array.          
   array_position(array: varbit[],      Return the index of the first         
   elem: varbit) → int                  occurrence of elem in array.          
   array_positions(array: bool[], elem: Returns and array of indexes of all   
   bool) → int[]                        occurrences of elem in array.         
   array_positions(array: bytes[],      Returns and array of indexes of all   
   elem: bytes) → int[]                 occurrences of elem in array.         
   array_positions(array: date[], elem: Returns and array of indexes of all   
   date) → int[]                        occurrences of elem in array.         
   array_positions(array: decimal[],    Returns and array of indexes of all   
   elem: decimal) → int[]               occurrences of elem in array.         
   array_positions(array: float[],      Returns and array of indexes of all   
   elem: float) → int[]                 occurrences of elem in array.         
   array_positions(array: inet[], elem: Returns and array of indexes of all   
   inet) → int[]                        occurrences of elem in array.         
   array_positions(array: int[], elem:  Returns and array of indexes of all   
   int) → int[]                         occurrences of elem in array.         
   array_positions(array: interval[],   Returns and array of indexes of all   
   elem: interval) → int[]              occurrences of elem in array.         
   array_positions(array: string[],     Returns and array of indexes of all   
   elem: string) → int[]                occurrences of elem in array.         
   array_positions(array: time[], elem: Returns and array of indexes of all   
   time) → int[]                        occurrences of elem in array.         
   array_positions(array: timestamp[],  Returns and array of indexes of all   
   elem: timestamp) → int[]             occurrences of elem in array.         
   array_positions(array:               Returns and array of indexes of all   
   timestamptz[], elem: timestamptz) →  occurrences of elem in array.         
   int[]                                
   array_positions(array: uuid[], elem: Returns and array of indexes of all   
   uuid) → int[]                        occurrences of elem in array.         
   array_positions(array: geography[],  Returns and array of indexes of all   
   elem: geography) → int[]             occurrences of elem in array.         
   array_positions(array: geometry[],   Returns and array of indexes of all   
   elem: geometry) → int[]              occurrences of elem in array.         
   array_positions(array: oid[], elem:  Returns and array of indexes of all   
   oid) → int[]                         occurrences of elem in array.         
   array_positions(array: timetz[],     Returns and array of indexes of all   
   elem: timetz) → int[]                occurrences of elem in array.         
   array_positions(array: varbit[],     Returns and array of indexes of all   
   elem: varbit) → int[]                occurrences of elem in array.         
   array_prepend(elem: bool, array:     Prepends elem to array, returning the 
   bool[]) → bool[]                     result.                               
   array_prepend(elem: bytes, array:    Prepends elem to array, returning the 
   bytes[]) → bytes[]                   result.                               
   array_prepend(elem: date, array:     Prepends elem to array, returning the 
   date[]) → date[]                     result.                               
   array_prepend(elem: decimal, array:  Prepends elem to array, returning the 
   decimal[]) → decimal[]               result.                               
   array_prepend(elem: float, array:    Prepends elem to array, returning the 
   float[]) → float[]                   result.                               
   array_prepend(elem: inet, array:     Prepends elem to array, returning the 
   inet[]) → inet[]                     result.                               
   array_prepend(elem: int, array:      Prepends elem to array, returning the 
   int[]) → int[]                       result.                               
   array_prepend(elem: interval, array: Prepends elem to array, returning the 
   interval[]) → interval[]             result.                               
   array_prepend(elem: string, array:   Prepends elem to array, returning the 
   string[]) → string[]                 result.                               
   array_prepend(elem: time, array:     Prepends elem to array, returning the 
   time[]) → time[]                     result.                               
   array_prepend(elem: timestamp,       Prepends elem to array, returning the 
   array: timestamp[]) → timestamp[]    result.                               
   array_prepend(elem: timestamptz,     Prepends elem to array, returning the 
   array: timestamptz[]) →              result.                               
   timestamptz[]                        
   array_prepend(elem: uuid, array:     Prepends elem to array, returning the 
   uuid[]) → uuid[]                     result.                               
   array_prepend(elem: geography,       Prepends elem to array, returning the 
   array: geography[]) → geography[]    result.                               
   array_prepend(elem: geometry, array: Prepends elem to array, returning the 
   geometry[]) → geometry[]             result.                               
   array_prepend(elem: oid, array:      Prepends elem to array, returning the 
   oid[]) → oid[]                       result.                               
   array_prepend(elem: timetz, array:   Prepends elem to array, returning the 
   timetz[]) → timetz[]                 result.                               
   array_prepend(elem: varbit, array:   Prepends elem to array, returning the 
   varbit[]) → varbit[]                 result.                               
   array_remove(array: bool[], elem:    Remove from array all elements equal  
   bool) → bool[]                       to elem.                              
   array_remove(array: bytes[], elem:   Remove from array all elements equal  
   bytes) → bytes[]                     to elem.                              
   array_remove(array: date[], elem:    Remove from array all elements equal  
   date) → date[]                       to elem.                              
   array_remove(array: decimal[], elem: Remove from array all elements equal  
   decimal) → decimal[]                 to elem.                              
   array_remove(array: float[], elem:   Remove from array all elements equal  
   float) → float[]                     to elem.                              
   array_remove(array: inet[], elem:    Remove from array all elements equal  
   inet) → inet[]                       to elem.                              
   array_remove(array: int[], elem:     Remove from array all elements equal  
   int) → int[]                         to elem.                              
   array_remove(array: interval[],      Remove from array all elements equal  
   elem: interval) → interval[]         to elem.                              
   array_remove(array: string[], elem:  Remove from array all elements equal  
   string) → string[]                   to elem.                              
   array_remove(array: time[], elem:    Remove from array all elements equal  
   time) → time[]                       to elem.                              
   array_remove(array: timestamp[],     Remove from array all elements equal  
   elem: timestamp) → timestamp[]       to elem.                              
   array_remove(array: timestamptz[],   Remove from array all elements equal  
   elem: timestamptz) → timestamptz[]   to elem.                              
   array_remove(array: uuid[], elem:    Remove from array all elements equal  
   uuid) → uuid[]                       to elem.                              
   array_remove(array: geography[],     Remove from array all elements equal  
   elem: geography) → geography[]       to elem.                              
   array_remove(array: geometry[],      Remove from array all elements equal  
   elem: geometry) → geometry[]         to elem.                              
   array_remove(array: oid[], elem:     Remove from array all elements equal  
   oid) → oid[]                         to elem.                              
   array_remove(array: timetz[], elem:  Remove from array all elements equal  
   timetz) → timetz[]                   to elem.                              
   array_remove(array: varbit[], elem:  Remove from array all elements equal  
   varbit) → varbit[]                   to elem.                              
   array_replace(array: bool[],         Replace all occurrences of toreplace  
   toreplace: bool, replacewith: bool)  in array with replacewith.            
   → bool[]                             
   array_replace(array: bytes[],        Replace all occurrences of toreplace  
   toreplace: bytes, replacewith:       in array with replacewith.            
   bytes) → bytes[]                     
   array_replace(array: date[],         Replace all occurrences of toreplace  
   toreplace: date, replacewith: date)  in array with replacewith.            
   → date[]                             
   array_replace(array: decimal[],      Replace all occurrences of toreplace  
   toreplace: decimal, replacewith:     in array with replacewith.            
   decimal) → decimal[]                 
   array_replace(array: float[],        Replace all occurrences of toreplace  
   toreplace: float, replacewith:       in array with replacewith.            
   float) → float[]                     
   array_replace(array: inet[],         Replace all occurrences of toreplace  
   toreplace: inet, replacewith: inet)  in array with replacewith.            
   → inet[]                             
   array_replace(array: int[],          Replace all occurrences of toreplace  
   toreplace: int, replacewith: int) →  in array with replacewith.            
   int[]                                
   array_replace(array: interval[],     Replace all occurrences of toreplace  
   toreplace: interval, replacewith:    in array with replacewith.            
   interval) → interval[]               
   array_replace(array: string[],       Replace all occurrences of toreplace  
   toreplace: string, replacewith:      in array with replacewith.            
   string) → string[]                   
   array_replace(array: time[],         Replace all occurrences of toreplace  
   toreplace: time, replacewith: time)  in array with replacewith.            
   → time[]                             
   array_replace(array: timestamp[],    Replace all occurrences of toreplace  
   toreplace: timestamp, replacewith:   in array with replacewith.            
   timestamp) → timestamp[]             
   array_replace(array: timestamptz[],  Replace all occurrences of toreplace  
   toreplace: timestamptz, replacewith: in array with replacewith.            
   timestamptz) → timestamptz[]         
   array_replace(array: uuid[],         Replace all occurrences of toreplace  
   toreplace: uuid, replacewith: uuid)  in array with replacewith.            
   → uuid[]                             
   array_replace(array: geography[],    Replace all occurrences of toreplace  
   toreplace: geography, replacewith:   in array with replacewith.            
   geography) → geography[]             
   array_replace(array: geometry[],     Replace all occurrences of toreplace  
   toreplace: geometry, replacewith:    in array with replacewith.            
   geometry) → geometry[]               
   array_replace(array: oid[],          Replace all occurrences of toreplace  
   toreplace: oid, replacewith: oid) →  in array with replacewith.            
   oid[]                                
   array_replace(array: timetz[],       Replace all occurrences of toreplace  
   toreplace: timetz, replacewith:      in array with replacewith.            
   timetz) → timetz[]                   
   array_replace(array: varbit[],       Replace all occurrences of toreplace  
   toreplace: varbit, replacewith:      in array with replacewith.            
   varbit) → varbit[]                   
   array_to_string(input: anyelement[], Join an array into a string with a    
   delim: string) → string              delimiter.                            
   array_to_string(input: anyelement[], Join an array into a string with a    
   delimiter: string, null: string) →   delimiter, replacing NULLs with a     
   string                               null string.                          
                                        Calculates the maximum value of input 
                                        on the provided array_dimension.      
   array_upper(input: anyelement[],     However, because CockroachDB doesn’t  
   array_dimension: int) → int          yet support multi-dimensional arrays, 
                                        the only supported array_dimension is 
                                        1.                                    
   string_to_array(str: string,         Split a string into components on a   
   delimiter: string) → string[]        delimiter.                            
   string_to_array(str: string,         Split a string into components on a   
   delimiter: string, null: string) →   delimiter with a specified string to  
   string[]                             consider NULL.                        

  BOOL functions

   Function → Returns                            Description                  
   ilike_escape(unescaped: string, pattern:      Matches case insensetively   
   string, escape: string) → bool                unescaped with pattern using 
                                                 ‘escape’ as an escape token. 
                                                 Test for subnet inclusion or 
   inet_contained_by_or_equals(val: inet,        equality, using only the     
   container: inet) → bool                       network parts of the         
                                                 addresses. The host part of  
                                                 the addresses is ignored.    
                                                 Test for subnet inclusion or 
   inet_contains_or_equals(container: inet, val: equality, using only the     
   inet) → bool                                  network parts of the         
                                                 addresses. The host part of  
                                                 the addresses is ignored.    
   inet_same_family(val: inet, val: inet) → bool Checks if two IP addresses   
                                                 are of the same IP family.   
   like_escape(unescaped: string, pattern:       Matches unescaped with       
   string, escape: string) → bool                pattern using ‘escape’ as an 
                                                 escape token.                
                                                 Checks whether unescaped not 
   not_ilike_escape(unescaped: string, pattern:  matches case insensetively   
   string, escape: string) → bool                with pattern using ‘escape’  
                                                 as an escape token.          
   not_like_escape(unescaped: string, pattern:   Checks whether unescaped not 
   string, escape: string) → bool                matches with pattern using   
                                                 ‘escape’ as an escape token. 
   not_similar_to_escape(unescaped: string,      Checks whether unescaped not 
   pattern: string, escape: string) → bool       matches with pattern using   
                                                 ‘escape’ as an escape token. 
   similar_to_escape(unescaped: string, pattern: Matches unescaped with       
   string, escape: string) → bool                pattern using ‘escape’ as an 
                                                 escape token.                

  Comparison functions

   Function → Returns                   Description                           
   greatest(anyelement...) → anyelement Returns the element with the greatest 
                                        value.                                
   least(anyelement...) → anyelement    Returns the element with the lowest   
                                        value.                                

  Date and time functions

   Function → Returns                            Description                  
   age(end: timestamptz, begin: timestamptz) →   Calculates the interval      
   interval                                      between begin and end.       
                                                 Calculates the interval      
   age(val: timestamptz) → interval              between val and the current  
                                                 time.                        
                                                 Returns the current system   
   clock_timestamp() → timestamp                 time on one of the cluster   
                                                 nodes.                       
                                                 Returns the current system   
   clock_timestamp() → timestamptz               time on one of the cluster   
                                                 nodes.                       
                                                 Returns the date of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   current_date() → date                         transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   current_timestamp() → date                    transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   current_timestamp() → timestamp               transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
                                                 transaction starts and which 
                                                 stays constant throughout    
   current_timestamp() → timestamptz             the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                                              
                                                 This function is the         
                                                 preferred overload and will  
                                                 be evaluated by default.     
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   current_timestamp(precision: int) → date      transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   current_timestamp(precision: int) → timestamp transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
                                                 transaction starts and which 
                                                 stays constant throughout    
   current_timestamp(precision: int) →           the transaction. This        
   timestamptz                                   timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                                              
                                                 This function is the         
                                                 preferred overload and will  
                                                 be evaluated by default.     
                                                 Truncates input to precision 
                                                 element. Sets all fields     
                                                 that are less significant    
                                                 than element to zero (or     
   date_trunc(element: string, input: date) →    one, for day and month)      
   timestamptz                                                                
                                                 Compatible elements:         
                                                 millennium, century, decade, 
                                                 year, quarter, month, week,  
                                                 day, hour, minute, second,   
                                                 millisecond, microsecond.    
                                                 Truncates input to precision 
                                                 element. Sets all fields     
                                                 that are less significant    
   date_trunc(element: string, input: time) →    than element to zero.        
   interval                                                                   
                                                 Compatible elements: hour,   
                                                 minute, second, millisecond, 
                                                 microsecond.                 
                                                 Truncates input to precision 
                                                 element. Sets all fields     
                                                 that are less significant    
                                                 than element to zero (or     
   date_trunc(element: string, input: timestamp) one, for day and month)      
   → timestamp                                                                
                                                 Compatible elements:         
                                                 millennium, century, decade, 
                                                 year, quarter, month, week,  
                                                 day, hour, minute, second,   
                                                 millisecond, microsecond.    
                                                 Truncates input to precision 
                                                 element. Sets all fields     
                                                 that are less significant    
                                                 than element to zero (or     
   date_trunc(element: string, input:            one, for day and month)      
   timestamptz) → timestamptz                                                 
                                                 Compatible elements:         
                                                 millennium, century, decade, 
                                                 year, quarter, month, week,  
                                                 day, hour, minute, second,   
                                                 millisecond, microsecond.    
                                                 Returns a timestamp which is 
                                                 very likely to be safe to    
                                                 perform against a follower   
                                                 replica.                     
                                                                              
                                                 This function is intended to 
                                                 be used with an AS OF SYSTEM 
                                                 TIME clause to perform       
                                                 historical reads against a   
   experimental_follower_read_timestamp() →      time which is recent but     
   timestamptz                                   sufficiently old for reads   
                                                 to be performed against the  
                                                 closest replica as opposed   
                                                 to the currently leaseholder 
                                                 for a given range.           
                                                                              
                                                 Note that this function      
                                                 requires an enterprise       
                                                 license on a CCL             
                                                 distribution to return       
                                                 without an error.            
                                                 From input, extracts and     
                                                 formats the time as          
   experimental_strftime(input: date,            identified in extract_format 
   extract_format: string) → string              using standard strftime      
                                                 notation (though not all     
                                                 formatting is supported).    
                                                 From input, extracts and     
                                                 formats the time as          
   experimental_strftime(input: timestamp,       identified in extract_format 
   extract_format: string) → string              using standard strftime      
                                                 notation (though not all     
                                                 formatting is supported).    
                                                 From input, extracts and     
                                                 formats the time as          
   experimental_strftime(input: timestamptz,     identified in extract_format 
   extract_format: string) → string              using standard strftime      
                                                 notation (though not all     
                                                 formatting is supported).    
                                                 Returns input as a           
   experimental_strptime(input: string, format:  timestamptz using format     
   string) → timestamptz                         (which uses standard         
                                                 strptime formatting).        
                                                 Extracts element from input. 
                                                                              
                                                 Compatible elements:         
                                                 millennium, century, decade, 
   extract(element: string, input: date) → float year, isoyear, quarter,      
                                                 month, week, dayofweek,      
                                                 isodow, dayofyear, julian,   
                                                 hour, minute, second,        
                                                 millisecond, microsecond,    
                                                 epoch                        
                                                 Extracts element from input. 
                                                                              
   extract(element: string, input: interval) →   Compatible elements:         
   float                                         millennium, century, decade, 
                                                 year, month, day, hour,      
                                                 minute, second, millisecond, 
                                                 microsecond, epoch           
                                                 Extracts element from input. 
                                                                              
   extract(element: string, input: time) → float Compatible elements: hour,   
                                                 minute, second, millisecond, 
                                                 microsecond, epoch           
                                                 Extracts element from input. 
                                                                              
                                                 Compatible elements:         
                                                 millennium, century, decade, 
   extract(element: string, input: timestamp) →  year, isoyear, quarter,      
   float                                         month, week, dayofweek,      
                                                 isodow, dayofyear, julian,   
                                                 hour, minute, second,        
                                                 millisecond, microsecond,    
                                                 epoch                        
                                                 Extracts element from input. 
                                                                              
                                                 Compatible elements:         
                                                 millennium, century, decade, 
                                                 year, isoyear, quarter,      
   extract(element: string, input: timestamptz)  month, week, dayofweek,      
   → float                                       isodow, dayofyear, julian,   
                                                 hour, minute, second,        
                                                 millisecond, microsecond,    
                                                 epoch, timezone,             
                                                 timezone_hour,               
                                                 timezone_minute              
                                                 Extracts element from input. 
                                                                              
   extract(element: string, input: timetz) →     Compatible elements: hour,   
   float                                         minute, second, millisecond, 
                                                 microsecond, epoch,          
                                                 timezone, timezone_hour,     
                                                 timezone_minute              
                                                 Extracts element from input. 
                                                 Compatible elements: hour,   
   extract_duration(element: string, input:      minute, second, millisecond, 
   interval) → int                               microsecond. This is         
                                                 deprecated in favor of       
                                                 extract which supports       
                                                 duration.                    
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   localtimestamp() → date                       transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
                                                 transaction starts and which 
                                                 stays constant throughout    
   localtimestamp() → timestamp                  the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                                              
                                                 This function is the         
                                                 preferred overload and will  
                                                 be evaluated by default.     
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   localtimestamp() → timestamptz                transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   localtimestamp(precision: int) → date         transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
                                                 transaction starts and which 
                                                 stays constant throughout    
   localtimestamp(precision: int) → timestamp    the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                                              
                                                 This function is the         
                                                 preferred overload and will  
                                                 be evaluated by default.     
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   localtimestamp(precision: int) → timestamptz  transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   now() → date                                  transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   now() → timestamp                             transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
                                                 transaction starts and which 
                                                 stays constant throughout    
   now() → timestamptz                           the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                                              
                                                 This function is the         
                                                 preferred overload and will  
                                                 be evaluated by default.     
   statement_timestamp() → timestamp             Returns the start time of    
                                                 the current statement.       
   statement_timestamp() → timestamptz           Returns the start time of    
                                                 the current statement.       
                                                 Returns the current system   
   timeofday() → string                          time on one of the cluster   
                                                 nodes as a string.           
   timezone(timezone: string, time: time) →      Treat given time without     
   timetz                                        time zone as located in the  
                                                 specified time zone.         
   timezone(timezone: string, timestamp:         Treat given time stamp       
   timestamp) → timestamptz                      without time zone as located 
                                                 in the specified time zone.  
                                                 Convert given time stamp     
   timezone(timezone: string, timestamptz:       with time zone to the new    
   timestamptz) → timestamp                      time zone, with no time zone 
                                                 designation.                 
                                                 Convert given time stamp     
   timezone(timezone: string,                    with time zone to the new    
   timestamptz_string: string) → timestamp       time zone, with no time zone 
                                                 designation.                 
   timezone(timezone: string, timetz: timetz) →  Convert given time with time 
   timetz                                        zone to the new time zone.   
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   transaction_timestamp() → date                transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
   transaction_timestamp() → timestamp           transaction starts and which 
                                                 stays constant throughout    
                                                 the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                 Returns the time of the      
                                                 current transaction.         
                                                                              
                                                 The value is based on a      
                                                 timestamp picked when the    
                                                 transaction starts and which 
                                                 stays constant throughout    
   transaction_timestamp() → timestamptz         the transaction. This        
                                                 timestamp has no             
                                                 relationship with the commit 
                                                 order of concurrent          
                                                 transactions.                
                                                                              
                                                 This function is the         
                                                 preferred overload and will  
                                                 be evaluated by default.     

  Enum functions

   Function → Returns                Description                              
   enum_first(val: anyenum) →        Returns the first value of the input     
   anyelement                        enum type.                               
   enum_last(val: anyenum) →         Returns the last value of the input enum 
   anyelement                        type.                                    
   enum_range(lower: anyenum, upper: Returns all values of the input enum in  
   anyenum) → anyelement             an ordered array between the two         
                                     arguments (inclusive).                   
   enum_range(val: anyenum) →        Returns all values of the input enum in  
   anyelement                        an ordered array.                        

  FLOAT functions

   Function → Returns            Description                                  
   abs(val: decimal) → decimal   Calculates the absolute value of val.        
   abs(val: float) → float       Calculates the absolute value of val.        
   abs(val: int) → int           Calculates the absolute value of val.        
   acos(val: float) → float      Calculates the inverse cosine of val.        
   acosd(val: float) → float     Calculates the inverse cosine of val with    
                                 the result in degrees                        
   acosh(val: float) → float     Calculates the inverse hyperbolic cosine of  
                                 val.                                         
   asin(val: float) → float      Calculates the inverse sine of val.          
   asind(val: float) → float     Calculates the inverse sine of val with the  
                                 result in degrees.                           
   asinh(val: float) → float     Calculates the inverse hyperbolic sine of    
                                 val.                                         
   atan(val: float) → float      Calculates the inverse tangent of val.       
   atan2(x: float, y: float) →   Calculates the inverse tangent of x/y.       
   float                         
   atan2d(x: float, y: float) →  Calculates the inverse tangent of x/y with   
   float                         the result in degrees                        
   atand(val: float) → float     Calculates the inverse tangent of val with   
                                 the result in degrees.                       
   atanh(val: float) → float     Calculates the inverse hyperbolic tangent of 
                                 val.                                         
   cbrt(val: decimal) → decimal  Calculates the cube root (∛) of val.         
   cbrt(val: float) → float      Calculates the cube root (∛) of val.         
   ceil(val: decimal) → decimal  Calculates the smallest integer not smaller  
                                 than val.                                    
   ceil(val: float) → float      Calculates the smallest integer not smaller  
                                 than val.                                    
   ceil(val: int) → float        Calculates the smallest integer not smaller  
                                 than val.                                    
   ceiling(val: decimal) →       Calculates the smallest integer not smaller  
   decimal                       than val.                                    
   ceiling(val: float) → float   Calculates the smallest integer not smaller  
                                 than val.                                    
   ceiling(val: int) → float     Calculates the smallest integer not smaller  
                                 than val.                                    
   cos(val: float) → float       Calculates the cosine of val.                
   cosd(val: float) → float      Calculates the cosine of val where val is in 
                                 degrees.                                     
   cosh(val: float) → float      Calculates the hyperbolic cosine of val.     
   cot(val: float) → float       Calculates the cotangent of val.             
   cotd(val: float) → float      Calculates the cotangent of val where val is 
                                 in degrees.                                  
   degrees(val: float) → float   Converts val as a radian value to a degree   
                                 value.                                       
   div(x: decimal, y: decimal) → Calculates the integer quotient of x/y.      
   decimal                       
   div(x: float, y: float) →     Calculates the integer quotient of x/y.      
   float                         
   div(x: int, y: int) → int     Calculates the integer quotient of x/y.      
   exp(val: decimal) → decimal   Calculates e ^ val.                          
   exp(val: float) → float       Calculates e ^ val.                          
   floor(val: decimal) → decimal Calculates the largest integer not greater   
                                 than val.                                    
   floor(val: float) → float     Calculates the largest integer not greater   
                                 than val.                                    
   floor(val: int) → float       Calculates the largest integer not greater   
                                 than val.                                    
   isnan(val: decimal) → bool    Returns true if val is NaN, false otherwise. 
   isnan(val: float) → bool      Returns true if val is NaN, false otherwise. 
   ln(val: decimal) → decimal    Calculates the natural log of val.           
   ln(val: float) → float        Calculates the natural log of val.           
   log(b: decimal, x: decimal) → Calculates the base b log of val.            
   decimal                       
   log(b: float, x: float) →     Calculates the base b log of val.            
   float                         
   log(val: decimal) → decimal   Calculates the base 10 log of val.           
   log(val: float) → float       Calculates the base 10 log of val.           
   mod(x: decimal, y: decimal) → Calculates x%y.                              
   decimal                       
   mod(x: float, y: float) →     Calculates x%y.                              
   float                         
   mod(x: int, y: int) → int     Calculates x%y.                              
   pi() → float                  Returns the value for pi                     
                                 (3.141592653589793).                         
   pow(x: decimal, y: decimal) → Calculates x^y.                              
   decimal                       
   pow(x: float, y: float) →     Calculates x^y.                              
   float                         
   pow(x: int, y: int) → int     Calculates x^y.                              
   power(x: decimal, y: decimal) Calculates x^y.                              
   → decimal                     
   power(x: float, y: float) →   Calculates x^y.                              
   float                         
   power(x: int, y: int) → int   Calculates x^y.                              
   radians(val: float) → float   Converts val as a degree value to a radians  
                                 value.                                       
   random() → float              Returns a random float between 0 and 1.      
                                 Keeps decimal_accuracy number of figures to  
   round(input: decimal,         the right of the zero position in input      
   decimal_accuracy: int) →      using half away from zero rounding. If       
   decimal                       decimal_accuracy is not in the range         
                                 -2^31…(2^31-1), the results are undefined.   
   round(input: float,           Keeps decimal_accuracy number of figures to  
   decimal_accuracy: int) →      the right of the zero position in input      
   float                         using half to even (banker’s) rounding.      
                                 Rounds val to the nearest integer, half away 
   round(val: decimal) → decimal from zero: round(+/-2.4) = +/-2,             
                                 round(+/-2.5) = +/-3.                        
   round(val: float) → float     Rounds val to the nearest integer using half 
                                 to even (banker’s) rounding.                 
   sign(val: decimal) → decimal  Determines the sign of val: 1 for positive;  
                                 0 for 0 values; -1 for negative.             
   sign(val: float) → float      Determines the sign of val: 1 for positive;  
                                 0 for 0 values; -1 for negative.             
   sign(val: int) → int          Determines the sign of val: 1 for positive;  
                                 0 for 0 values; -1 for negative.             
   sin(val: float) → float       Calculates the sine of val.                  
   sind(val: float) → float      Calculates the sine of val where val is in   
                                 degrees.                                     
   sinh(val: float) → float      Calculates the hyperbolic sine of val.       
   sqrt(val: decimal) → decimal  Calculates the square root of val.           
   sqrt(val: float) → float      Calculates the square root of val.           
   tan(val: float) → float       Calculates the tangent of val.               
   tand(val: float) → float      Calculates the tangent of val where val is   
                                 in degrees.                                  
   tanh(val: float) → float      Calculates the hyperbolic tangent of val.    
   trunc(val: decimal) → decimal Truncates the decimal values of val.         
   trunc(val: float) → float     Truncates the decimal values of val.         

  Geospatial functions

   Function → Returns                   Description                           
   addgeometrycolumn(catalog_name:                                            
   string, schema_name: string,         Adds a new geometry column to an      
   table_name: string, column_name:     existing table and returns metadata   
   string, srid: int, type: string,     about the column created.
   dimension: int) → string             
   addgeometrycolumn(catalog_name:                                            
   string, schema_name: string,         Adds a new geometry column to an      
   table_name: string, column_name:     existing table and returns metadata   
   string, srid: int, type: string,     about the column created.
   dimension: int, use_typmod: bool) →  
   string                               
   addgeometrycolumn(schema_name:                                             
   string, table_name: string,          Adds a new geometry column to an      
   column_name: string, srid: int,      existing table and returns metadata   
   type: string, dimension: int) →      about the column created.
   string                               
   addgeometrycolumn(schema_name:                                             
   string, table_name: string,          Adds a new geometry column to an      
   column_name: string, srid: int,      existing table and returns metadata   
   type: string, dimension: int,        about the column created.
   use_typmod: bool) → string           
   addgeometrycolumn(table_name:        Adds a new geometry column to an      
   string, column_name: string, srid:   existing table and returns metadata   
   int, type: string, dimension: int) → about the column created.             
   string                               
   addgeometrycolumn(table_name:        Adds a new geometry column to an      
   string, column_name: string, srid:   existing table and returns metadata   
   int, type: string, dimension: int,   about the column created.             
   use_typmod: bool) → string           
                                        Returns the area of the given         
                                        geography in meters^2. Uses a         
   st_area(geography: geography) →      spheroid to perform the operation.    
   float                                                                      
                                        This function utilizes the            
                                        GeographicLib library for spheroid    
                                        calculations.                         
                                        Returns the area of the given         
                                        geography in meters^2.                
                                                                              
   st_area(geography: geography,        This function utilizes the S2 library 
   use_spheroid: bool) → float          for spherical calculations.           
                                                                              
                                        This function utilizes the            
                                        GeographicLib library for spheroid    
                                        calculations.                         
                                        Returns the area of the given         
                                        geometry.                             
   st_area(geometry: geometry) → float                                        
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns the area of the given         
   st_area2d(geometry: geometry) →      geometry.                             
   float                                                                      
                                        This function utilizes the GEOS       
                                        module.                               
   st_asbinary(geography: geography) →  Returns the WKB representation of a   
   bytes                                given Geography.                      
                                        Returns the WKB representation of a   
   st_asbinary(geography: geography,    given Geography. This variant has a   
   xdr_or_ndr: string) → bytes          second argument denoting the encoding 
                                        - xdr for big endian and ndr for      
                                        little endian.                        
   st_asbinary(geometry: geometry) →    Returns the WKB representation of a   
   bytes                                given Geometry.                       
                                        Returns the WKB representation of a   
   st_asbinary(geometry: geometry,      given Geometry. This variant has a    
   xdr_or_ndr: string) → bytes          second argument denoting the encoding 
                                        - xdr for big endian and ndr for      
                                        little endian.                        
   st_asewkb(geography: geography) →    Returns the EWKB representation of a  
   bytes                                given Geography.                      
   st_asewkb(geometry: geometry) →      Returns the EWKB representation of a  
   bytes                                given Geometry.                       
   st_asewkt(geography: geography) →    Returns the EWKT representation of a  
   string                               given Geography. A default of 15      
                                        decimal digits is used.               
                                        Returns the EWKT representation of a  
   st_asewkt(geography: geography,      given Geography. The                  
   maximum_decimal_digits: int) →       maximum_decimal_digits parameter      
   string                               controls the maximum decimal digits   
                                        to print after the .. Use -1 to print 
                                        as many digits as possible.           
   st_asewkt(geometry: geometry) →      Returns the EWKT representation of a  
   string                               given Geometry. A maximum of 15       
                                        decimal digits is used.               
                                        Returns the WKT representation of a   
   st_asewkt(geometry: geometry,        given Geometry. The                   
   maximum_decimal_digits: int) →       maximum_decimal_digits parameter      
   string                               controls the maximum decimal digits   
                                        to print after the .. Use -1 to print 
                                        as many digits as possible.           
   st_asgeojson(geography: geography) → Returns the GeoJSON representation of 
   string                               a given Geography. Coordinates have a 
                                        maximum of 9 decimal digits.          
                                        Returns the GeoJSON representation of 
   st_asgeojson(geography: geography,   a given Geography with                
   max_decimal_digits: int) → string    max_decimal_digits output for each    
                                        coordinate value.                     
                                        Returns the GeoJSON representation of 
                                        a given Geography with                
                                        max_decimal_digits output for each    
                                        coordinate value.                     
                                                                              
                                        Options is a flag that can be         
                                        bitmasked. The options are:           
   st_asgeojson(geography: geography,                                         
   max_decimal_digits: int, options:      * 0: no option (default for         
   int) → string                            Geography)                        
                                          * 1: GeoJSON BBOX                   
                                          * 2: GeoJSON Short CRS (e.g         
                                            EPSG:4326)                        
                                          * 4: GeoJSON Long CRS (e.g          
                                            urn:ogc:def:crs:EPSG::4326)       
                                          * 8: GeoJSON Short CRS if not       
                                            EPSG:4326                         
   st_asgeojson(geometry: geometry) →   Returns the GeoJSON representation of 
   string                               a given Geometry. Coordinates have a  
                                        maximum of 9 decimal digits.          
                                        Returns the GeoJSON representation of 
   st_asgeojson(geometry: geometry,     a given Geometry with                 
   max_decimal_digits: int) → string    max_decimal_digits output for each    
                                        coordinate value.                     
                                        Returns the GeoJSON representation of 
                                        a given Geometry with                 
                                        max_decimal_digits output for each    
                                        coordinate value.                     
                                                                              
                                        Options is a flag that can be         
   st_asgeojson(geometry: geometry,     bitmasked. The options are:           
   max_decimal_digits: int, options:                                          
   int) → string                          * 0: no option                      
                                          * 1: GeoJSON BBOX                   
                                          * 2: GeoJSON Short CRS (e.g         
                                            EPSG:4326)                        
                                          * 4: GeoJSON Long CRS (e.g          
                                            urn:ogc:def:crs:EPSG::4326)       
                                          * 8: GeoJSON Short CRS if not       
                                            EPSG:4326 (default for Geometry)  
   st_ashexewkb(geography: geography) → Returns the EWKB representation in    
   string                               hex of a given Geography.             
                                        Returns the EWKB representation in    
   st_ashexewkb(geography: geography,   hex of a given Geography. This        
   xdr_or_ndr: string) → string         variant has a second argument         
                                        denoting the encoding - xdr for big   
                                        endian and ndr for little endian.     
   st_ashexewkb(geometry: geometry) →   Returns the EWKB representation in    
   string                               hex of a given Geometry.              
                                        Returns the EWKB representation in    
   st_ashexewkb(geometry: geometry,     hex of a given Geometry. This variant 
   xdr_or_ndr: string) → string         has a second argument denoting the    
                                        encoding - xdr for big endian and ndr 
                                        for little endian.                    
   st_ashexwkb(geography: geography) →  Returns the WKB representation in hex 
   string                               of a given Geography.                 
   st_ashexwkb(geometry: geometry) →    Returns the WKB representation in hex 
   string                               of a given Geometry.                  
   st_askml(geography: geography) →     Returns the KML representation of a   
   string                               given Geography.                      
   st_askml(geometry: geometry) →       Returns the KML representation of a   
   string                               given Geometry.                       
   st_astext(geography: geography) →    Returns the WKT representation of a   
   string                               given Geography. A default of 15      
                                        decimal digits is used.               
                                        Returns the WKT representation of a   
   st_astext(geography: geography,      given Geography. The                  
   maximum_decimal_digits: int) →       maximum_decimal_digits parameter      
   string                               controls the maximum decimal digits   
                                        to print after the .. Use -1 to print 
                                        as many digits as possible.           
   st_astext(geometry: geometry) →      Returns the WKT representation of a   
   string                               given Geometry. A maximum of 15       
                                        decimal digits is used.               
                                        Returns the WKT representation of a   
   st_astext(geometry: geometry,        given Geometry. The                   
   maximum_decimal_digits: int) →       maximum_decimal_digits parameter      
   string                               controls the maximum decimal digits   
                                        to print after the .. Use -1 to print 
                                        as many digits as possible.           
                                        Returns the azimuth in radians of the 
                                        segment defined by the given point    
                                        geometries, or NULL if the two points 
   st_azimuth(geometry_a: geometry,     are coincident.                       
   geometry_b: geometry) → float                                              
                                        The azimuth is angle is referenced    
                                        from north, and is positive           
                                        clockwise: North = 0; East = π/2;     
                                        South = π; West = 3π/2.               
                                        Returns a Geometry that represents    
                                        all points whose distance is less     
   st_buffer(geometry: geometry,        than or equal to the given distance   
   distance: float) → geometry          from the given Geometry.              
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns a Geometry that represents    
                                        all points whose distance is less     
                                        than or equal to the given distance   
                                        from the given Geometry.              
                                                                              
                                        This variant takes in a space         
                                        separate parameter string, which will 
                                        augment the buffer styles. Valid      
   st_buffer(geometry: geometry,        parameters are:                       
   distance: float,                                                           
   buffer_style_params: string) →         * quad_segs=<int>, default 8        
   geometry                               * endcap=<round|flat|butt|square>,  
                                            default round                     
                                          * join=<round|mitre|miter|bevel>,   
                                            default round                     
                                          * side=<both|left|right>, default   
                                            both                              
                                          * mitre_limit=<float>, default 5.0  
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns a Geometry that represents    
                                        all points whose distance is less     
                                        than or equal to the given distance   
                                        from the given Geometry.              
   st_buffer(geometry: geometry,                                              
   distance: float, quad_segs: int) →   This variant approximates the circle  
   geometry                             into quad_seg segments per line (the  
                                        default is 8).                        
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns a Geometry that represents    
                                        all points whose distance is less     
   st_buffer(geometry_str: string,      than or equal to the given distance   
   distance: decimal) → geometry        from the given Geometry.              
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns a Geometry that represents    
                                        all points whose distance is less     
                                        than or equal to the given distance   
                                        from the given Geometry.              
                                                                              
                                        This variant takes in a space         
                                        separate parameter string, which will 
                                        augment the buffer styles. Valid      
   st_buffer(geometry_str: string,      parameters are:                       
   distance: decimal,                                                         
   buffer_style_params: string) →         * quad_segs=<int>, default 8        
   geometry                               * endcap=<round|flat|butt|square>,  
                                            default round                     
                                          * join=<round|mitre|miter|bevel>,   
                                            default round                     
                                          * side=<both|left|right>, default   
                                            both                              
                                          * mitre_limit=<float>, default 5.0  
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns a Geometry that represents    
                                        all points whose distance is less     
                                        than or equal to the given distance   
                                        from the given Geometry.              
   st_buffer(geometry_str: string,                                            
   distance: decimal, quad_segs: int) → This variant approximates the circle  
   geometry                             into quad_seg segments per line (the  
                                        default is 8).                        
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns a Geometry that represents    
                                        all points whose distance is less     
   st_buffer(geometry_str: string,      than or equal to the given distance   
   distance: float) → geometry          from the given Geometry.              
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns a Geometry that represents    
                                        all points whose distance is less     
                                        than or equal to the given distance   
                                        from the given Geometry.              
                                                                              
                                        This variant takes in a space         
                                        separate parameter string, which will 
                                        augment the buffer styles. Valid      
   st_buffer(geometry_str: string,      parameters are:                       
   distance: float,                                                           
   buffer_style_params: string) →         * quad_segs=<int>, default 8        
   geometry                               * endcap=<round|flat|butt|square>,  
                                            default round                     
                                          * join=<round|mitre|miter|bevel>,   
                                            default round                     
                                          * side=<both|left|right>, default   
                                            both                              
                                          * mitre_limit=<float>, default 5.0  
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns a Geometry that represents    
                                        all points whose distance is less     
                                        than or equal to the given distance   
                                        from the given Geometry.              
   st_buffer(geometry_str: string,                                            
   distance: float, quad_segs: int) →   This variant approximates the circle  
   geometry                             into quad_seg segments per line (the  
                                        default is 8).                        
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns the centroid of the given     
   st_centroid(geometry: geometry) →    geometry.                             
   geometry                                                                   
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns the centroid of the given     
                                        string, which will be parsed as a     
   st_centroid(val: string) → geometry  geometry object.                      
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns true if no points of          
                                        geometry_b lie in the exterior of     
                                        geometry_a, and there is at least one 
                                        point in the interior of geometry_b   
                                        that lies in the interior of          
   st_contains(geometry_a: geometry,    geometry_a.                           
   geometry_b: geometry) → bool                                               
                                        This function utilizes the GEOS       
                                        module.                               
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns true if geometry_b intersects 
                                        the interior of geometry_a but not    
                                        the boundary or exterior of           
   st_containsproperly(geometry_a:      geometry_a.                           
   geometry, geometry_b: geometry) →                                          
   bool                                 This function utilizes the GEOS       
                                        module.                               
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns true if no point in           
                                        geography_a is outside geography_b.   
                                                                              
                                        The calculations performed are have a 
   st_coveredby(geography_a: geography, precision of 1cm.                     
   geography_b: geography) → bool                                             
                                        This function utilizes the S2 library 
                                        for spherical calculations.           
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns true if no point in           
                                        geometry_a is outside geometry_b      
                                                                              
   st_coveredby(geometry_a: geometry,   This function utilizes the GEOS       
   geometry_b: geometry) → bool         module.                               
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns true if no point in           
                                        geography_b is outside geography_a.   
                                                                              
   st_covers(geography_a: geography,    This function utilizes the S2 library 
   geography_b: geography) → bool       for spherical calculations.           
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns true if no point in           
                                        geometry_b is outside geometry_a.     
                                                                              
   st_covers(geometry_a: geometry,      This function utilizes the GEOS       
   geometry_b: geometry) → bool         module.                               
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns true if geometry_a has some - 
                                        but not all - interior points in      
                                        common with geometry_b.               
   st_crosses(geometry_a: geometry,                                           
   geometry_b: geometry) → bool         This function utilizes the GEOS       
                                        module.                               
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns true if every pair of points  
   st_dfullywithin(geometry_a:          comprising geometry_a and geometry_b  
   geometry, geometry_b: geometry,      are within distance units. In other   
   distance: float) → bool              words, the ST_MaxDistance between     
                                        geometry_a and geometry_b is less     
                                        than or equal to distance units.      
                                        Returns the distance in meters        
                                        between geography_a and geography_b.  
                                        Uses a spheroid to perform the        
                                        operation."\n\nWhen operating on a    
                                        spheroid, this function will use the  
                                        sphere to calculate the closest two   
                                        points using S2. The spheroid         
   st_distance(geography_a: geography,  distance between these two points is  
   geography_b: geography) → float      calculated using GeographicLib. This  
                                        follows observed PostGIS behavior.    
                                                                              
                                        This function utilizes the            
                                        GeographicLib library for spheroid    
                                        calculations.                         
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns the distance in meters        
                                        between geography_a and               
                                        geography_b."\n\nWhen operating on a  
                                        spheroid, this function will use the  
                                        sphere to calculate the closest two   
                                        points using S2. The spheroid         
                                        distance between these two points is  
                                        calculated using GeographicLib. This  
   st_distance(geography_a: geography,  follows observed PostGIS behavior.    
   geography_b: geography,                                                    
   use_spheroid: bool) → float          This function utilizes the S2 library 
                                        for spherical calculations.           
                                                                              
                                        This function utilizes the            
                                        GeographicLib library for spheroid    
                                        calculations.                         
                                                                              
                                        This function will automatically use  
                                        any available index.                  
   st_distance(geometry_a: geometry,    Returns the distance between the      
   geometry_b: geometry) → float        given geometries.                     
                                        Returns true if any of geography_a is 
                                        within distance meters of             
                                        geography_b. Uses a spheroid to       
                                        perform the operation."\n\nWhen       
                                        operating on a spheroid, this         
                                        function will use the sphere to       
                                        calculate the closest two points      
                                        using S2. The spheroid distance       
                                        between these two points is           
   st_dwithin(geography_a: geography,   calculated using GeographicLib. This  
   geography_b: geography, distance:    follows observed PostGIS behavior.    
   float) → bool                                                              
                                        The calculations performed are have a 
                                        precision of 1cm.                     
                                                                              
                                        This function utilizes the            
                                        GeographicLib library for spheroid    
                                        calculations.                         
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns true if any of geography_a is 
                                        within distance meters of             
                                        geography_b."\n\nWhen operating on a  
                                        spheroid, this function will use the  
                                        sphere to calculate the closest two   
                                        points using S2. The spheroid         
                                        distance between these two points is  
                                        calculated using GeographicLib. This  
                                        follows observed PostGIS behavior.    
   st_dwithin(geography_a: geography,                                         
   geography_b: geography, distance:    The calculations performed are have a 
   float, use_spheroid: bool) → bool    precision of 1cm.                     
                                                                              
                                        This function utilizes the S2 library 
                                        for spherical calculations.           
                                                                              
                                        This function utilizes the            
                                        GeographicLib library for spheroid    
                                        calculations.                         
                                                                              
                                        This function will automatically use  
                                        any available index.                  
   st_dwithin(geometry_a: geometry,     Returns true if any of geometry_a is  
   geometry_b: geometry, distance:      within distance units of geometry_b.  
   float) → bool                        
                                        Returns the last point of a geometry  
   st_endpoint(geometry: geometry) →    which has shape LineString. Returns   
   geometry                             NULL if the geometry is not a         
                                        LineString.                           
                                        Returns true if geometry_a is         
                                        spatially equal to geometry_b, i.e.   
                                        ST_Within(geometry_a, geometry_b) =   
                                        ST_Within(geometry_b, geometry_a) =   
   st_equals(geometry_a: geometry,      true.                                 
   geometry_b: geometry) → bool                                               
                                        This function utilizes the GEOS       
                                        module.                               
                                                                              
                                        This function will automatically use  
                                        any available index.                  
   st_exteriorring(geometry: geometry)  Returns the exterior ring of a        
   → geometry                           Polygon as a LineString. Returns NULL 
                                        if the shape is not a Polygon.        
   st_geogfromewkb(val: bytes) →        Returns the Geography from an EWKB    
   geography                            representation.                       
   st_geogfromewkt(val: string) →       Returns the Geography from an EWKT    
   geography                            representation.                       
   st_geogfromgeojson(val: string) →    Returns the Geography from an GeoJSON 
   geography                            representation.                       
   st_geogfromgeojson(val: jsonb) →     Returns the Geography from an GeoJSON 
   geography                            representation.                       
                                        Returns the Geography from a WKT or   
   st_geogfromtext(str: string, srid:   EWKT representation with an SRID. If  
   int) → geography                     the SRID is present in both the EWKT  
                                        and the argument, the argument value  
                                        is used.                              
   st_geogfromtext(val: string) →       Returns the Geography from a WKT or   
   geography                            EWKT representation.                  
   st_geogfromwkb(bytes: bytes, srid:   Returns the Geography from a WKB      
   int) → geography                     representation with the given SRID    
                                        set.                                  
   st_geogfromwkb(val: bytes) →         Returns the Geography from a WKB      
   geography                            representation.                       
                                        Returns the Geography from a WKT or   
   st_geographyfromtext(str: string,    EWKT representation with an SRID. If  
   srid: int) → geography               the SRID is present in both the EWKT  
                                        and the argument, the argument value  
                                        is used.                              
   st_geographyfromtext(val: string) →  Returns the Geography from a WKT or   
   geography                            EWKT representation.                  
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_geomcollfromtext(str: string,     the shape underneath is not           
   srid: int) → geometry                GeometryCollection, NULL is returned. 
                                        If the SRID is present in both the    
                                        EWKT and the argument, the argument   
                                        value is used.                        
                                        Returns the Geometry from a WKT or    
   st_geomcollfromtext(val: string) →   EWKT representation. If the shape     
   geometry                             underneath is not GeometryCollection, 
                                        NULL is returned.                     
                                        Returns the Geometry from a WKB       
   st_geomcollfromwkb(val: bytes) →     representation. If the shape          
   geometry                             underneath is not GeometryCollection, 
                                        NULL is returned.                     
                                        Returns the Geometry from a WKB       
   st_geomcollfromwkb(wkb: bytes, srid: representation with an SRID. If the   
   int) → geometry                      shape underneath is not               
                                        GeometryCollection, NULL is returned. 
                                        Returns the Geometry from a WKT or    
   st_geometryfromtext(str: string,     EWKT representation with an SRID. If  
   srid: int) → geometry                the SRID is present in both the EWKT  
                                        and the argument, the argument value  
                                        is used.                              
   st_geometryfromtext(val: string) →   Returns the Geometry from a WKT or    
   geometry                             EWKT representation.                  
   st_geometryn(geometry: geometry, n:  Returns the n-th Geometry             
   int) → geometry                      (1-indexed). Returns NULL if out of   
                                        bounds.                               
                                        Returns the type of geometry as a     
   st_geometrytype(geometry: geometry)  string.                               
   → string                                                                   
                                        This function utilizes the GEOS       
                                        module.                               
   st_geomfromewkb(val: bytes) →        Returns the Geometry from an EWKB     
   geometry                             representation.                       
   st_geomfromewkt(val: string) →       Returns the Geometry from an EWKT     
   geometry                             representation.                       
   st_geomfromgeojson(val: string) →    Returns the Geometry from an GeoJSON  
   geometry                             representation.                       
   st_geomfromgeojson(val: jsonb) →     Returns the Geometry from an GeoJSON  
   geometry                             representation.                       
                                        Returns the Geometry from a WKT or    
   st_geomfromtext(str: string, srid:   EWKT representation with an SRID. If  
   int) → geometry                      the SRID is present in both the EWKT  
                                        and the argument, the argument value  
                                        is used.                              
   st_geomfromtext(val: string) →       Returns the Geometry from a WKT or    
   geometry                             EWKT representation.                  
   st_geomfromwkb(bytes: bytes, srid:   Returns the Geometry from a WKB       
   int) → geometry                      representation with the given SRID    
                                        set.                                  
   st_geomfromwkb(val: bytes) →         Returns the Geometry from a WKB       
   geometry                             representation.                       
                                        Returns the n-th (1-indexed) interior 
   st_interiorringn(geometry: geometry, ring of a Polygon as a LineString.    
   n: int) → geometry                   Returns NULL if the shape is not a    
                                        Polygon, or the ring does not exist.  
                                        Returns the point intersections of    
   st_intersection(geometry_a:          the given geometries.                 
   geometry, geometry_b: geometry) →                                          
   geometry                             This function utilizes the GEOS       
                                        module.                               
                                        Returns true if geography_a shares    
                                        any portion of space with             
                                        geography_b.                          
                                                                              
   st_intersects(geography_a:           The calculations performed are have a 
   geography, geography_b: geography) → precision of 1cm.                     
   bool                                                                       
                                        This function utilizes the S2 library 
                                        for spherical calculations.           
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns true if geometry_a shares any 
                                        portion of space with geometry_b.     
                                                                              
                                        The calculations performed are have a 
   st_intersects(geometry_a: geometry,  precision of 1cm.                     
   geometry_b: geometry) → bool                                               
                                        This function utilizes the GEOS       
                                        module.                               
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns the length of the given       
                                        geography in meters. Uses a spheroid  
   st_length(geography: geography) →    to perform the operation.             
   float                                                                      
                                        This function utilizes the            
                                        GeographicLib library for spheroid    
                                        calculations.                         
                                        Returns the length of the given       
                                        geography in meters.                  
                                                                              
   st_length(geography: geography,      This function utilizes the S2 library 
   use_spheroid: bool) → float          for spherical calculations.           
                                                                              
                                        This function utilizes the            
                                        GeographicLib library for spheroid    
                                        calculations.                         
                                        Returns the length of the given       
                                        geometry.                             
                                                                              
   st_length(geometry: geometry) →      Note ST_Length is only valid for      
   float                                LineString - use ST_Perimeter for     
                                        Polygon.                              
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_linefromtext(str: string, srid:   the shape underneath is not           
   int) → geometry                      LineString, NULL is returned. If the  
                                        SRID is present in both the EWKT and  
                                        the argument, the argument value is   
                                        used.                                 
                                        Returns the Geometry from a WKT or    
   st_linefromtext(val: string) →       EWKT representation. If the shape     
   geometry                             underneath is not LineString, NULL is 
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_linefromwkb(val: bytes) →         representation. If the shape          
   geometry                             underneath is not LineString, NULL is 
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_linefromwkb(wkb: bytes, srid:     representation with an SRID. If the   
   int) → geometry                      shape underneath is not LineString,   
                                        NULL is returned.                     
                                        Returns a point along the given       
   st_lineinterpolatepoint(geometry:    LineString which is at given fraction 
   geometry, fraction: float) →         of LineString’s total length.         
   geometry                                                                   
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns one or more points along the  
                                        LineString which is at an integral    
                                        multiples of given fraction of        
                                        LineString’s total length.            
   st_lineinterpolatepoints(geometry:                                         
   geometry, fraction: float) →         Note If the result has zero or one    
   geometry                             points, it will be returned as a      
                                        POINT. If it has two or more points,  
                                        it will be returned as a MULTIPOINT.  
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns one or more points along the  
                                        LineString which is at an integral    
                                        multiples of given fraction of        
                                        LineString’s total length. If repeat  
                                        is false (default true) then it       
   st_lineinterpolatepoints(geometry:   returns first point.                  
   geometry, fraction: float, repeat:                                         
   bool) → geometry                     Note If the result has zero or one    
                                        points, it will be returned as a      
                                        POINT. If it has two or more points,  
                                        it will be returned as a MULTIPOINT.  
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_linestringfromtext(str: string,   the shape underneath is not           
   srid: int) → geometry                LineString, NULL is returned. If the  
                                        SRID is present in both the EWKT and  
                                        the argument, the argument value is   
                                        used.                                 
                                        Returns the Geometry from a WKT or    
   st_linestringfromtext(val: string) → EWKT representation. If the shape     
   geometry                             underneath is not LineString, NULL is 
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_linestringfromwkb(val: bytes) →   representation. If the shape          
   geometry                             underneath is not LineString, NULL is 
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_linestringfromwkb(wkb: bytes,     representation with an SRID. If the   
   srid: int) → geometry                shape underneath is not LineString,   
                                        NULL is returned.                     
                                        Returns the LineString corresponds to 
                                        the max distance across every pair of 
                                        points comprising the given           
                                        geometries.                           
                                                                              
   st_longestline(geometry_a: geometry, Note if geometries are the same, it   
   geometry_b: geometry) → geometry     will return the LineString with the   
                                        maximum distance between the          
                                        geometry’s vertexes. The function     
                                        will return the longest line that was 
                                        discovered first when comparing       
                                        maximum distances if more than one is 
                                        found.                                
   st_makepoint(x: float, y: float) →   Returns a new Point with the given X  
   geometry                             and Y coordinates.                    
                                        Returns the maximum distance across   
                                        every pair of points comprising the   
   st_maxdistance(geometry_a: geometry, given geometries. Note if the         
   geometry_b: geometry) → float        geometries are the same, it will      
                                        return the maximum distance between   
                                        the geometry’s vertexes.              
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_mlinefromtext(str: string, srid:  the shape underneath is not           
   int) → geometry                      MultiLineString, NULL is returned. If 
                                        the SRID is present in both the EWKT  
                                        and the argument, the argument value  
                                        is used.                              
                                        Returns the Geometry from a WKT or    
   st_mlinefromtext(val: string) →      EWKT representation. If the shape     
   geometry                             underneath is not MultiLineString,    
                                        NULL is returned.                     
                                        Returns the Geometry from a WKB       
   st_mlinefromwkb(val: bytes) →        representation. If the shape          
   geometry                             underneath is not MultiLineString,    
                                        NULL is returned.                     
                                        Returns the Geometry from a WKB       
   st_mlinefromwkb(wkb: bytes, srid:    representation with an SRID. If the   
   int) → geometry                      shape underneath is not               
                                        MultiLineString, NULL is returned.    
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_mpointfromtext(str: string, srid: the shape underneath is not           
   int) → geometry                      MultiPoint, NULL is returned. If the  
                                        SRID is present in both the EWKT and  
                                        the argument, the argument value is   
                                        used.                                 
                                        Returns the Geometry from a WKT or    
   st_mpointfromtext(val: string) →     EWKT representation. If the shape     
   geometry                             underneath is not MultiPoint, NULL is 
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_mpointfromwkb(val: bytes) →       representation. If the shape          
   geometry                             underneath is not MultiPoint, NULL is 
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_mpointfromwkb(wkb: bytes, srid:   representation with an SRID. If the   
   int) → geometry                      shape underneath is not MultiPoint,   
                                        NULL is returned.                     
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_mpolyfromtext(str: string, srid:  the shape underneath is not           
   int) → geometry                      MultiPolygon, NULL is returned. If    
                                        the SRID is present in both the EWKT  
                                        and the argument, the argument value  
                                        is used.                              
                                        Returns the Geometry from a WKT or    
   st_mpolyfromtext(val: string) →      EWKT representation. If the shape     
   geometry                             underneath is not MultiPolygon, NULL  
                                        is returned.                          
                                        Returns the Geometry from a WKB       
   st_mpolyfromwkb(val: bytes) →        representation. If the shape          
   geometry                             underneath is not MultiPolygon, NULL  
                                        is returned.                          
                                        Returns the Geometry from a WKB       
   st_mpolyfromwkb(wkb: bytes, srid:    representation with an SRID. If the   
   int) → geometry                      shape underneath is not MultiPolygon, 
                                        NULL is returned.                     
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_multilinefromtext(str: string,    the shape underneath is not           
   srid: int) → geometry                MultiLineString, NULL is returned. If 
                                        the SRID is present in both the EWKT  
                                        and the argument, the argument value  
                                        is used.                              
                                        Returns the Geometry from a WKT or    
   st_multilinefromtext(val: string) →  EWKT representation. If the shape     
   geometry                             underneath is not MultiLineString,    
                                        NULL is returned.                     
                                        Returns the Geometry from a WKB       
   st_multilinefromwkb(val: bytes) →    representation. If the shape          
   geometry                             underneath is not MultiLineString,    
                                        NULL is returned.                     
                                        Returns the Geometry from a WKB       
   st_multilinefromwkb(wkb: bytes,      representation with an SRID. If the   
   srid: int) → geometry                shape underneath is not               
                                        MultiLineString, NULL is returned.    
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_multilinestringfromtext(str:      the shape underneath is not           
   string, srid: int) → geometry        MultiLineString, NULL is returned. If 
                                        the SRID is present in both the EWKT  
                                        and the argument, the argument value  
                                        is used.                              
                                        Returns the Geometry from a WKT or    
   st_multilinestringfromtext(val:      EWKT representation. If the shape     
   string) → geometry                   underneath is not MultiLineString,    
                                        NULL is returned.                     
                                        Returns the Geometry from a WKB       
   st_multilinestringfromwkb(val:       representation. If the shape          
   bytes) → geometry                    underneath is not MultiLineString,    
                                        NULL is returned.                     
                                        Returns the Geometry from a WKB       
   st_multilinestringfromwkb(wkb:       representation with an SRID. If the   
   bytes, srid: int) → geometry         shape underneath is not               
                                        MultiLineString, NULL is returned.    
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_multipointfromtext(str: string,   the shape underneath is not           
   srid: int) → geometry                MultiPoint, NULL is returned. If the  
                                        SRID is present in both the EWKT and  
                                        the argument, the argument value is   
                                        used.                                 
                                        Returns the Geometry from a WKT or    
   st_multipointfromtext(val: string) → EWKT representation. If the shape     
   geometry                             underneath is not MultiPoint, NULL is 
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_multipointfromwkb(val: bytes) →   representation. If the shape          
   geometry                             underneath is not MultiPoint, NULL is 
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_multipointfromwkb(wkb: bytes,     representation with an SRID. If the   
   srid: int) → geometry                shape underneath is not MultiPoint,   
                                        NULL is returned.                     
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_multipolyfromtext(str: string,    the shape underneath is not           
   srid: int) → geometry                MultiPolygon, NULL is returned. If    
                                        the SRID is present in both the EWKT  
                                        and the argument, the argument value  
                                        is used.                              
                                        Returns the Geometry from a WKT or    
   st_multipolyfromtext(val: string) →  EWKT representation. If the shape     
   geometry                             underneath is not MultiPolygon, NULL  
                                        is returned.                          
                                        Returns the Geometry from a WKB       
   st_multipolyfromwkb(val: bytes) →    representation. If the shape          
   geometry                             underneath is not MultiPolygon, NULL  
                                        is returned.                          
                                        Returns the Geometry from a WKB       
   st_multipolyfromwkb(wkb: bytes,      representation with an SRID. If the   
   srid: int) → geometry                shape underneath is not MultiPolygon, 
                                        NULL is returned.                     
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_multipolygonfromtext(str: string, the shape underneath is not           
   srid: int) → geometry                MultiPolygon, NULL is returned. If    
                                        the SRID is present in both the EWKT  
                                        and the argument, the argument value  
                                        is used.                              
                                        Returns the Geometry from a WKT or    
   st_multipolygonfromtext(val: string) EWKT representation. If the shape     
   → geometry                           underneath is not MultiPolygon, NULL  
                                        is returned.                          
                                        Returns the Geometry from a WKB       
   st_multipolygonfromwkb(val: bytes) → representation. If the shape          
   geometry                             underneath is not MultiPolygon, NULL  
                                        is returned.                          
                                        Returns the Geometry from a WKB       
   st_multipolygonfromwkb(wkb: bytes,   representation with an SRID. If the   
   srid: int) → geometry                shape underneath is not MultiPolygon, 
                                        NULL is returned.                     
   st_ndims(geometry: geometry) → int   Returns the number of dimensions of a 
                                        given Geometry.                       
                                        Returns the number of points in a     
   st_npoints(geometry: geometry) → int given Geometry. Works for any shape   
                                        type.                                 
                                        Returns the number of rings in a      
   st_nrings(geometry: geometry) → int  Polygon Geometry. Returns 0 if the    
                                        shape is not a Polygon.               
   st_numgeometries(geometry: geometry) Returns the number of shapes inside a 
   → int                                given Geometry.                       
   st_numinteriorring(geometry:         Returns the number of interior rings  
   geometry) → int                      in a Polygon Geometry. Returns NULL   
                                        if the shape is not a Polygon.        
   st_numinteriorrings(geometry:        Returns the number of interior rings  
   geometry) → int                      in a Polygon Geometry. Returns NULL   
                                        if the shape is not a Polygon.        
   st_numpoints(geometry: geometry) →   Returns the number of points in a     
   int                                  LineString. Returns NULL if the       
                                        Geometry is not a LineString.         
                                        Returns true if geometry_a intersects 
                                        but does not completely contain       
                                        geometry_b, or vice versa. “Does not  
                                        completely” implies                   
                                        ST_Within(geometry_a, geometry_b) =   
   st_overlaps(geometry_a: geometry,    ST_Within(geometry_b, geometry_a) =   
   geometry_b: geometry) → bool         false.                                
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Returns the perimeter of the given    
                                        geography in meters. Uses a spheroid  
   st_perimeter(geography: geography) → to perform the operation.             
   float                                                                      
                                        This function utilizes the            
                                        GeographicLib library for spheroid    
                                        calculations.                         
                                        Returns the perimeter of the given    
                                        geography in meters.                  
                                                                              
   st_perimeter(geography: geography,   This function utilizes the S2 library 
   use_spheroid: bool) → float          for spherical calculations.           
                                                                              
                                        This function utilizes the            
                                        GeographicLib library for spheroid    
                                        calculations.                         
                                        Returns the perimeter of the given    
                                        geometry in meters.                   
                                                                              
   st_perimeter(geometry: geometry) →   Note ST_Perimeter is only valid for   
   float                                Polygon - use ST_Length for           
                                        LineString.                           
                                                                              
                                        This function utilizes the GEOS       
                                        module.                               
   st_point(x: float, y: float) →       Returns a new Point with the given X  
   geometry                             and Y coordinates.                    
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_pointfromtext(str: string, srid:  the shape underneath is not Point,    
   int) → geometry                      NULL is returned. If the SRID is      
                                        present in both the EWKT and the      
                                        argument, the argument value is used. 
                                        Returns the Geometry from a WKT or    
   st_pointfromtext(val: string) →      EWKT representation. If the shape     
   geometry                             underneath is not Point, NULL is      
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_pointfromwkb(val: bytes) →        representation. If the shape          
   geometry                             underneath is not Point, NULL is      
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_pointfromwkb(wkb: bytes, srid:    representation with an SRID. If the   
   int) → geometry                      shape underneath is not Point, NULL   
                                        is returned.                          
   st_pointn(geometry: geometry, n:     Returns the n-th Point of a           
   int) → geometry                      LineString (1-indexed). Returns NULL  
                                        if out of bounds or not a LineString. 
                                        Returns a point that intersects with  
   st_pointonsurface(geometry:          the given Geometry.                   
   geometry) → geometry                                                       
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_polyfromtext(str: string, srid:   the shape underneath is not Polygon,  
   int) → geometry                      NULL is returned. If the SRID is      
                                        present in both the EWKT and the      
                                        argument, the argument value is used. 
                                        Returns the Geometry from a WKT or    
   st_polyfromtext(val: string) →       EWKT representation. If the shape     
   geometry                             underneath is not Polygon, NULL is    
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_polyfromwkb(val: bytes) →         representation. If the shape          
   geometry                             underneath is not Polygon, NULL is    
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_polyfromwkb(wkb: bytes, srid:     representation with an SRID. If the   
   int) → geometry                      shape underneath is not Polygon, NULL 
                                        is returned.                          
                                        Returns the Geometry from a WKT or    
                                        EWKT representation with an SRID. If  
   st_polygonfromtext(str: string,      the shape underneath is not Polygon,  
   srid: int) → geometry                NULL is returned. If the SRID is      
                                        present in both the EWKT and the      
                                        argument, the argument value is used. 
                                        Returns the Geometry from a WKT or    
   st_polygonfromtext(val: string) →    EWKT representation. If the shape     
   geometry                             underneath is not Polygon, NULL is    
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_polygonfromwkb(val: bytes) →      representation. If the shape          
   geometry                             underneath is not Polygon, NULL is    
                                        returned.                             
                                        Returns the Geometry from a WKB       
   st_polygonfromwkb(wkb: bytes, srid:  representation with an SRID. If the   
   int) → geometry                      shape underneath is not Polygon, NULL 
                                        is returned.                          
                                        Returns a point projected from a      
                                        start point along a geodesic using a  
                                        given distance and azimuth (bearing). 
                                        This is known as the direct geodesic  
                                        problem.                              
                                                                              
                                        The distance is given in meters.      
   st_project(geography: geography,     Negative values are supported.        
   distance: float, azimuth: float) →                                         
   geography                            The azimuth (also known as heading or 
                                        bearing) is given in radians. It is   
                                        measured clockwise from true north    
                                        (azimuth zero). East is azimuth π/2   
                                        (90 degrees); south is azimuth π (180 
                                        degrees); west is azimuth 3π/2 (270   
                                        degrees). Negative azimuth values and 
                                        values greater than 2π (360 degrees)  
                                        are supported.                        
                                        Returns the DE-9IM spatial relation   
   st_relate(geometry_a: geometry,      between geometry_a and geometry_b.    
   geometry_b: geometry) → string                                             
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns whether the DE-9IM spatial    
                                        relation between geometry_a and       
   st_relate(geometry_a: geometry,      geometry_b matches the DE-9IM         
   geometry_b: geometry, pattern:       pattern.                              
   string) → bool                                                             
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns a modified Geography having   
                                        no segment longer than the given      
                                        max_segment_length meters.            
   st_segmentize(geography: geography,                                        
   max_segment_length_meters: float) →  The calculations are done on a        
   geography                            sphere.                               
                                                                              
                                        This function utilizes the S2 library 
                                        for spherical calculations.           
   st_segmentize(geometry: geometry,    Returns a modified Geometry having no 
   max_segment_length: float) →         segment longer than the given         
   geometry                             max_segment_length. Length units are  
                                        in units of spatial reference.        
   st_setsrid(geography: geography,     Sets a Geography to a new SRID        
   srid: int) → geography               without transforming the coordinates. 
   st_setsrid(geometry: geometry, srid: Sets a Geometry to a new SRID without 
   int) → geometry                      transforming the coordinates.         
                                        Returns the LineString corresponds to 
                                        the minimum distance across every     
                                        pair of points comprising the given   
                                        geometries.                           
                                                                              
   st_shortestline(geometry_a:          Note if geometries are the same, it   
   geometry, geometry_b: geometry) →    will return the LineString with the   
   geometry                             minimum distance between the          
                                        geometry’s vertexes. The function     
                                        will return the shortest line that    
                                        was discovered first when comparing   
                                        minimum distances if more than one is 
                                        found.                                
                                        Returns the Spatial Reference         
   st_srid(geography: geography) → int  Identifier (SRID) for the             
                                        ST_Geography as defined in            
                                        spatial_ref_sys table.                
                                        Returns the Spatial Reference         
   st_srid(geometry: geometry) → int    Identifier (SRID) for the ST_Geometry 
                                        as defined in spatial_ref_sys table.  
                                        Returns the first point of a geometry 
   st_startpoint(geometry: geometry) →  which has shape LineString. Returns   
   geometry                             NULL if the geometry is not a         
                                        LineString.                           
                                        Returns a text summary of the         
                                        contents of the geography.            
                                                                              
                                        Flags shown square brackets after the 
                                        geometry type have the following      
   st_summary(geography: geography) →   meaning:                              
   string                                                                     
                                          * M: has M coordinate               
                                          * Z: has Z coordinate               
                                          * B: has a cached bounding box      
                                          * G: is geography                   
                                          * S: has spatial reference system   
                                        Returns a text summary of the         
                                        contents of the geometry.             
                                                                              
                                        Flags shown square brackets after the 
                                        geometry type have the following      
   st_summary(geometry: geometry) →     meaning:                              
   string                                                                     
                                          * M: has M coordinate               
                                          * Z: has Z coordinate               
                                          * B: has a cached bounding box      
                                          * G: is geography                   
                                          * S: has spatial reference system   
                                        Returns true if the only points in    
                                        common between geometry_a and         
                                        geometry_b are on the boundary. Note  
                                        points do not touch other points.     
   st_touches(geometry_a: geometry,                                           
   geometry_b: geometry) → bool         This function utilizes the GEOS       
                                        module.                               
                                                                              
                                        This function will automatically use  
                                        any available index.                  
                                        Transforms a geometry into the        
                                        coordinate reference system assuming  
                                        the from_proj_text to the new         
   st_transform(geometry: geometry,     to_proj_text by projecting its        
   from_proj_text: string, srid: int) → coordinates. The supplied SRID is set 
   geometry                             on the new geometry.                  
                                                                              
                                        This function utilizes the PROJ       
                                        library for coordinate projections.   
                                        Transforms a geometry into the        
                                        coordinate reference system assuming  
   st_transform(geometry: geometry,     the from_proj_text to the new         
   from_proj_text: string,              to_proj_text by projecting its        
   to_proj_text: string) → geometry     coordinates.                          
                                                                              
                                        This function utilizes the PROJ       
                                        library for coordinate projections.   
                                        Transforms a geometry into the given  
                                        SRID coordinate reference system by   
   st_transform(geometry: geometry,     projecting its coordinates.           
   srid: int) → geometry                                                      
                                        This function utilizes the PROJ       
                                        library for coordinate projections.   
                                        Transforms a geometry into the        
                                        coordinate reference system           
   st_transform(geometry: geometry,     referenced by the projection text by  
   to_proj_text: string) → geometry     projecting its coordinates.           
                                                                              
                                        This function utilizes the PROJ       
                                        library for coordinate projections.   
                                        Returns the union of the given        
                                        geometries as a single Geometry       
   st_union(geometry_a: geometry,       object.                               
   geometry_b: geometry) → geometry                                           
                                        This function utilizes the GEOS       
                                        module.                               
                                        Returns true if geometry_a is         
                                        completely inside geometry_b.         
                                                                              
   st_within(geometry_a: geometry,      This function utilizes the GEOS       
   geometry_b: geometry) → bool         module.                               
                                                                              
                                        This function will automatically use  
                                        any available index.                  
   st_wkbtosql(val: bytes) → geometry   Returns the Geometry from a WKB       
                                        representation.                       
   st_wkttosql(val: string) → geometry  Returns the Geometry from a WKT or    
                                        EWKT representation.                  
   st_x(geometry: geometry) → float     Returns the X coordinate of a         
                                        geometry if it is a Point.            
   st_y(geometry: geometry) → float     Returns the Y coordinate of a         
                                        geometry if it is a Point.            

  ID generation functions

   Function → Returns             Description                                 
   experimental_uuid_v4() → bytes Returns a UUID.                             
   gen_random_uuid() → uuid       Generates a random UUID and returns it as a 
                                  value of UUID type.                         
                                  Returns a unique ID used by CockroachDB to  
                                  generate unique row IDs if a Primary Key    
                                  isn’t defined for the table. The value is a 
   unique_rowid() → int           combination of the insert timestamp and the 
                                  ID of the node executing the statement,     
                                  which guarantees this combination is        
                                  globally unique. However, there can be gaps 
                                  and the order is not completely guaranteed. 
   uuid_v4() → bytes              Returns a UUID.                             

  INET functions

   Function → Returns         Description                                     
                              Converts the combined IP address and prefix     
                              length to an abbreviated display format as      
                              text.For INET types, this will omit the prefix  
   abbrev(val: inet) → string length if it’s not the default (32 or IPv4, 128 
                              for IPv6)                                       
                                                                              
                              For example, abbrev('192.168.1.2/24') returns   
                              '192.168.1.2/24'                                
                              Gets the broadcast address for the network      
   broadcast(val: inet) →     address represented by the value.               
   inet                                                                       
                              For example, broadcast('192.168.1.2/24')        
                              returns '192.168.1.255/24'                      
                              Extracts the IP family of the value; 4 for      
   family(val: inet) → int    IPv4, 6 for IPv6.                               
                                                                              
                              For example, family('::1') returns 6            
                              Extracts the address part of the combined       
                              address/prefixlen value as text.                
   host(val: inet) → string                                                   
                              For example, host('192.168.1.2/16') returns     
                              '192.168.1.2'                                   
                              Creates an IP host mask corresponding to the    
                              prefix length in the value.                     
   hostmask(val: inet) → inet                                                 
                              For example, hostmask('192.168.1.2/16') returns 
                              '0.0.255.255'                                   
                              Retrieves the prefix length stored in the       
                              value.                                          
   masklen(val: inet) → int                                                   
                              For example, masklen('192.168.1.2/16') returns  
                              16                                              
                              Creates an IP network mask corresponding to the 
                              prefix length in the value.                     
   netmask(val: inet) → inet                                                  
                              For example, netmask('192.168.1.2/16') returns  
                              '255.255.0.0'                                   
                              Sets the prefix length of val to prefixlen.     
   set_masklen(val: inet,                                                     
   prefixlen: int) → inet     For example, set_masklen('192.168.1.2', 16)     
                              returns '192.168.1.2/16'.                       
   text(val: inet) → string   Converts the IP address and prefix length to    
                              text.                                           

  INT functions

   Function → Returns                  Description                            
   crc32c(bytes...) → int              Calculates the CRC-32 hash using the   
                                       Castagnoli polynomial.                 
   crc32c(string...) → int             Calculates the CRC-32 hash using the   
                                       Castagnoli polynomial.                 
   crc32ieee(bytes...) → int           Calculates the CRC-32 hash using the   
                                       IEEE polynomial.                       
   crc32ieee(string...) → int          Calculates the CRC-32 hash using the   
                                       IEEE polynomial.                       
   fnv32(bytes...) → int               Calculates the 32-bit FNV-1 hash value 
                                       of a set of values.                    
   fnv32(string...) → int              Calculates the 32-bit FNV-1 hash value 
                                       of a set of values.                    
   fnv32a(bytes...) → int              Calculates the 32-bit FNV-1a hash      
                                       value of a set of values.              
   fnv32a(string...) → int             Calculates the 32-bit FNV-1a hash      
                                       value of a set of values.              
   fnv64(bytes...) → int               Calculates the 64-bit FNV-1 hash value 
                                       of a set of values.                    
   fnv64(string...) → int              Calculates the 64-bit FNV-1 hash value 
                                       of a set of values.                    
   fnv64a(bytes...) → int              Calculates the 64-bit FNV-1a hash      
                                       value of a set of values.              
   fnv64a(string...) → int             Calculates the 64-bit FNV-1a hash      
                                       value of a set of values.              
   width_bucket(operand: decimal, b1:  return the bucket number to which      
   decimal, b2: decimal, count: int) → operand would be assigned in a         
   int                                 histogram having count equal-width     
                                       buckets spanning the range b1 to b2.   
                                       return the bucket number to which      
   width_bucket(operand: int, b1: int, operand would be assigned in a         
   b2: int, count: int) → int          histogram having count equal-width     
                                       buckets spanning the range b1 to b2.   
                                       return the bucket number to which      
                                       operand would be assigned given an     
                                       array listing the lower bounds of the  
   width_bucket(operand: anyelement,   buckets; returns 0 for an input less   
   thresholds: anyelement[]) → int     than the first lower bound; the        
                                       thresholds array must be sorted,       
                                       smallest first, or unexpected results  
                                       will be obtained                       

  JSONB functions

   Function → Returns                    Description                          
   array_to_json(array: anyelement[]) →  Returns the array as JSON or JSONB.  
   jsonb                                 
   array_to_json(array: anyelement[],    Returns the array as JSON or JSONB.  
   pretty_bool: bool) → jsonb            
   json_array_length(json: jsonb) → int  Returns the number of elements in    
                                         the outermost JSON or JSONB array.   
                                         Builds a                             
   json_build_array(anyelement...) →     possibly-heterogeneously-typed JSON  
   jsonb                                 or JSONB array out of a variadic     
                                         argument list.                       
   json_build_object(anyelement...) →    Builds a JSON object out of a        
   jsonb                                 variadic argument list.              
   json_extract_path(jsonb, string...) → Returns the JSON value pointed to by 
   jsonb                                 the variadic arguments.              
                                         This form of json_object takes keys  
   json_object(keys: string[], values:   and values pairwise from two         
   string[]) → jsonb                     separate arrays. In all other        
                                         respects it is identical to the      
                                         one-argument form.                   
                                         Builds a JSON or JSONB object out of 
                                         a text array. The array must have    
   json_object(texts: string[]) → jsonb  exactly one dimension with an even   
                                         number of members, in which case     
                                         they are taken as alternating        
                                         key/value pairs.                     
   json_remove_path(val: jsonb, path:    Remove the specified path from the   
   string[]) → jsonb                     JSON object.                         
   json_set(val: jsonb, path: string[],  Returns the JSON value pointed to by 
   to: jsonb) → jsonb                    the variadic arguments.              
                                         Returns the JSON value pointed to by 
   json_set(val: jsonb, path: string[],  the variadic arguments. If           
   to: jsonb, create_missing: bool) →    create_missing is false, new keys    
   jsonb                                 will not be inserted to objects and  
                                         values will not be prepended or      
                                         appended to arrays.                  
                                         Returns from_json with all object    
   json_strip_nulls(from_json: jsonb) →  fields that have null values         
   jsonb                                 omitted. Other null values are       
                                         untouched.                           
   json_typeof(val: jsonb) → string      Returns the type of the outermost    
                                         JSON value as a text string.         
   jsonb_array_length(json: jsonb) → int Returns the number of elements in    
                                         the outermost JSON or JSONB array.   
                                         Builds a                             
   jsonb_build_array(anyelement...) →    possibly-heterogeneously-typed JSON  
   jsonb                                 or JSONB array out of a variadic     
                                         argument list.                       
   jsonb_build_object(anyelement...) →   Builds a JSON object out of a        
   jsonb                                 variadic argument list.              
   jsonb_extract_path(jsonb, string...)  Returns the JSON value pointed to by 
   → jsonb                               the variadic arguments.              
   jsonb_insert(target: jsonb, path:     Returns the JSON value pointed to by 
   string[], new_val: jsonb) → jsonb     the variadic arguments. new_val will 
                                         be inserted before path target.      
                                         Returns the JSON value pointed to by 
   jsonb_insert(target: jsonb, path:     the variadic arguments. If           
   string[], new_val: jsonb,             insert_after is true (default is     
   insert_after: bool) → jsonb           false), new_val will be inserted     
                                         after path target.                   
                                         This form of json_object takes keys  
   jsonb_object(keys: string[], values:  and values pairwise from two         
   string[]) → jsonb                     separate arrays. In all other        
                                         respects it is identical to the      
                                         one-argument form.                   
                                         Builds a JSON or JSONB object out of 
                                         a text array. The array must have    
   jsonb_object(texts: string[]) → jsonb exactly one dimension with an even   
                                         number of members, in which case     
                                         they are taken as alternating        
                                         key/value pairs.                     
   jsonb_pretty(val: jsonb) → string     Returns the given JSON value as a    
                                         STRING indented and with newlines.   
   jsonb_set(val: jsonb, path: string[], Returns the JSON value pointed to by 
   to: jsonb) → jsonb                    the variadic arguments.              
                                         Returns the JSON value pointed to by 
   jsonb_set(val: jsonb, path: string[], the variadic arguments. If           
   to: jsonb, create_missing: bool) →    create_missing is false, new keys    
   jsonb                                 will not be inserted to objects and  
                                         values will not be prepended or      
                                         appended to arrays.                  
                                         Returns from_json with all object    
   jsonb_strip_nulls(from_json: jsonb) → fields that have null values         
   jsonb                                 omitted. Other null values are       
                                         untouched.                           
   jsonb_typeof(val: jsonb) → string     Returns the type of the outermost    
                                         JSON value as a text string.         
   to_json(val: anyelement) → jsonb      Returns the value as JSON or JSONB.  
   to_jsonb(val: anyelement) → jsonb     Returns the value as JSON or JSONB.  

  Sequence functions

   Function → Returns                   Description                           
                                        Returns the latest value obtained     
   currval(sequence_name: string) → int with nextval for this sequence in     
                                        this session.                         
   lastval() → int                      Return value most recently obtained   
                                        with nextval in this session.         
   nextval(sequence_name: string) → int Advances the given sequence and       
                                        returns its new value.                
   setval(sequence_name: string, value: Set the given sequence’s current      
   int) → int                           value. The next call to nextval will  
                                        return value + Increment              
                                        Set the given sequence’s current      
   setval(sequence_name: string, value: value. If is_called is false, the     
   int, is_called: bool) → int          next call to nextval will return      
                                        value; otherwise value + Increment.   

  Set-returning functions

   Function → Returns                                  Description            
                                                       Produces a virtual     
   aclexplode(aclitems: string[]) → tuple{oid AS       table containing       
   grantor, oid AS grantee, string AS privilege_type,  aclitem stuff (returns 
   bool AS is_grantable}                               no rows as this        
                                                       feature is unsupported 
                                                       in CockroachDB)        
                                                       For internal CRDB      
                                                       testing only. The      
                                                       function calls a       
   crdb_internal.testing_callback(name: string) → int  callback identified by 
                                                       name registered with   
                                                       the server by the      
                                                       test.                  
                                                       Produces a virtual     
                                                       table containing a     
                                                       single row with no     
                                                       values.                
   crdb_internal.unary_table() → tuple                                        
                                                       This function is used  
                                                       only by CockroachDB’s  
                                                       developers for testing 
                                                       purposes.              
                                                       Produces a virtual     
                                                       table containing the   
   generate_series(start: int, end: int) → int         integer values from    
                                                       start to end,          
                                                       inclusive.             
                                                       Produces a virtual     
                                                       table containing the   
   generate_series(start: int, end: int, step: int) →  integer values from    
   int                                                 start to end,          
                                                       inclusive, by          
                                                       increment of step.     
                                                       Produces a virtual     
                                                       table containing the   
   generate_series(start: timestamp, end: timestamp,   timestamp values from  
   step: interval) → timestamp                         start to end,          
                                                       inclusive, by          
                                                       increment of step.     
                                                       Returns a series       
   generate_subscripts(array: anyelement[]) → int      comprising the given   
                                                       array’s subscripts.    
   generate_subscripts(array: anyelement[], dim: int)  Returns a series       
   → int                                               comprising the given   
                                                       array’s subscripts.    
                                                       Returns a series       
                                                       comprising the given   
   generate_subscripts(array: anyelement[], dim: int,  array’s subscripts.    
   reverse: bool) → int                                                       
                                                       When reverse is true,  
                                                       the series is returned 
                                                       in reverse order.      
   information_schema._pg_expandarray(input:           Returns the input      
   anyelement[]) → anyelement                          array as a set of rows 
                                                       with an index          
                                                       Expands a JSON array   
   json_array_elements(input: jsonb) → jsonb           to a set of JSON       
                                                       values.                
                                                       Expands a JSON array   
   json_array_elements_text(input: jsonb) → string     to a set of text       
                                                       values.                
                                                       Expands the outermost  
   json_each(input: jsonb) → tuple{string AS key,      JSON or JSONB object   
   jsonb AS value}                                     into a set of          
                                                       key/value pairs.       
                                                       Expands the outermost  
                                                       JSON or JSONB object   
   json_each_text(input: jsonb) → tuple{string AS key, into a set of          
   string AS value}                                    key/value pairs. The   
                                                       returned values will   
                                                       be of type text.       
                                                       Returns sorted set of  
   json_object_keys(input: jsonb) → string             keys in the outermost  
                                                       JSON object.           
                                                       Expands a JSON array   
   jsonb_array_elements(input: jsonb) → jsonb          to a set of JSON       
                                                       values.                
                                                       Expands a JSON array   
   jsonb_array_elements_text(input: jsonb) → string    to a set of text       
                                                       values.                
                                                       Expands the outermost  
   jsonb_each(input: jsonb) → tuple{string AS key,     JSON or JSONB object   
   jsonb AS value}                                     into a set of          
                                                       key/value pairs.       
                                                       Expands the outermost  
                                                       JSON or JSONB object   
   jsonb_each_text(input: jsonb) → tuple{string AS     into a set of          
   key, string AS value}                               key/value pairs. The   
                                                       returned values will   
                                                       be of type text.       
                                                       Returns sorted set of  
   jsonb_object_keys(input: jsonb) → string            keys in the outermost  
                                                       JSON object.           
                                                       Produces a virtual     
   pg_get_keywords() → tuple{string AS word, string AS table containing the   
   catcode, string AS catdesc}                         keywords known to the  
                                                       SQL parser.            
   unnest(anyelement[], anyelement[], anyelement[]...) Returns the input      
   → tuple                                             arrays as a set of     
                                                       rows                   
   unnest(input: anyelement[]) → anyelement            Returns the input      
                                                       array as a set of rows 

  String and byte functions

   Function → Returns          Description                                    
                               Returns the character code of the first        
   ascii(val: string) → int    character in val. Despite the name, the        
                               function supports Unicode too.                 
   bit_length(val: bytes) →    Calculates the number of bits used to          
   int                         represent val.                                 
   bit_length(val: string) →   Calculates the number of bits used to          
   int                         represent val.                                 
   bit_length(val: varbit) →   Calculates the number of bits used to          
   int                         represent val.                                 
                               Removes any characters included in trim_chars  
   btrim(input: string,        from the beginning or end of input (applies    
   trim_chars: string) →       recursively).                                  
   string                                                                     
                               For example, btrim('doggie', 'eod') returns    
                               ggi.                                           
   btrim(val: string) → string Removes all spaces from the beginning and end  
                               of val.                                        
   char_length(val: bytes) →   Calculates the number of bytes in val.         
   int                         
   char_length(val: string) →  Calculates the number of characters in val.    
   int                         
   character_length(val:       Calculates the number of bytes in val.         
   bytes) → int                
   character_length(val:       Calculates the number of characters in val.    
   string) → int               
   chr(val: int) → string      Returns the character with the code given in   
                               val. Inverse function of ascii().              
   concat(string...) → string  Concatenates a comma-separated list of         
                               strings.                                       
                               Uses the first argument as a separator between 
   concat_ws(string...) →      the concatenation of the subsequent arguments. 
   string                                                                     
                               For example concat_ws('!','wow','great')       
                               returns wow!great.                             
   convert_from(str: bytes,    Decode the bytes in str into a string using    
   enc: string) → string       encoding enc. Supports encodings ‘UTF8’ and    
                               ‘LATIN1’.                                      
   convert_to(str: string,     Encode the string str as a byte array using    
   enc: string) → bytes        encoding enc. Supports encodings ‘UTF8’ and    
                               ‘LATIN1’.                                      
   decode(text: string,        Decodes data using format (hex / escape /      
   format: string) → bytes     base64).                                       
   encode(data: bytes, format: Encodes data using format (hex / escape /      
   string) → string            base64).                                       
   from_ip(val: bytes) →       Converts the byte string representation of an  
   string                      IP to its character string representation.     
   from_uuid(val: bytes) →     Converts the byte string representation of a   
   string                      UUID to its character string representation.   
   get_bit(bit_string: varbit, Extracts a bit at given index in the bit       
   index: int) → int           array.                                         
   get_bit(byte_string: bytes, Extracts a bit at given index in the byte      
   index: int) → int           array.                                         
   initcap(val: string) →      Capitalizes the first letter of val.           
   string                      
   left(input: bytes,          Returns the first return_set bytes from input. 
   return_set: int) → bytes    
   left(input: string,         Returns the first return_set characters from   
   return_set: int) → string   input.                                         
   length(val: bytes) → int    Calculates the number of bytes in val.         
   length(val: string) → int   Calculates the number of characters in val.    
   length(val: varbit) → int   Calculates the number of bits in val.          
   lower(val: string) → string Converts all characters in val to their        
                               lower-case equivalents.                        
   lpad(string: string,        Pads string to length by adding ’ ’ to the     
   length: int) → string       left of string.If string is longer than length 
                               it is truncated.                               
   lpad(string: string,        Pads string by adding fill to the left of      
   length: int, fill: string)  string to make it length. If string is longer  
   → string                    than length it is truncated.                   
                               Removes any characters included in trim_chars  
   ltrim(input: string,        from the beginning (left-hand side) of input   
   trim_chars: string) →       (applies recursively).                         
   string                                                                     
                               For example, ltrim('doggie', 'od') returns     
                               ggie.                                          
   ltrim(val: string) → string Removes all spaces from the beginning          
                               (left-hand side) of val.                       
   md5(bytes...) → string      Calculates the MD5 hash value of a set of      
                               values.                                        
   md5(string...) → string     Calculates the MD5 hash value of a set of      
                               values.                                        
   octet_length(val: bytes) →  Calculates the number of bytes used to         
   int                         represent val.                                 
   octet_length(val: string) → Calculates the number of bytes used to         
   int                         represent val.                                 
   octet_length(val: varbit) → Calculates the number of bits used to          
   int                         represent val.                                 
                               Replaces characters in input with overlay_val  
   overlay(input: string,      starting at start_pos (begins at 1).           
   overlay_val: string,                                                       
   start_pos: int) → string    For example, overlay('doggie', 'CAT', 2)       
                               returns dCATie.                                
   overlay(input: string,      Deletes the characters in input between        
   overlay_val: string,        start_pos and end_pos (count starts at 1), and 
   start_pos: int, end_pos:    then insert overlay_val at start_pos.          
   int) → string               
   pg_collation_for(str:       Returns the collation of the argument          
   anyelement) → string        
   quote_ident(val: string) →  Return val suitably quoted to serve as         
   string                      identifier in a SQL statement.                 
   quote_literal(val: string)  Return val suitably quoted to serve as string  
   → string                    literal in a SQL statement.                    
   quote_literal(val:          Coerce val to a string and then quote it as a  
   anyelement) → string        literal.                                       
   quote_nullable(val: string) Coerce val to a string and then quote it as a  
   → string                    literal. If val is NULL, returns ‘NULL’.       
   quote_nullable(val:         Coerce val to a string and then quote it as a  
   anyelement) → string        literal. If val is NULL, returns ‘NULL’.       
   regexp_extract(input:       Returns the first match for the Regular        
   string, regex: string) →    Expression regex in input.                     
   string                      
   regexp_replace(input:       Replaces matches for the Regular Expression    
   string, regex: string,      regex in input with the Regular Expression     
   replace: string) → string   replace.                                       
                               Replaces matches for the regular expression    
                               regex in input with the regular expression     
                               replace using flags.                           
                                                                              
                               CockroachDB supports the following flags:      
                                                                              
                               Flag   Description                             
                               c      Case-sensitive matching                 
                               g      Global matching (match each substring   
                                      instead of only the first)              
   regexp_replace(input:       i      Case-insensitive matching               
   string, regex: string,      m or n Newline-sensitive (see below)           
   replace: string, flags:     p      Partial newline-sensitive matching (see 
   string) → string                   below)                                  
                               s      Newline-insensitive (default)           
                               w      Inverse partial newline-sensitive       
                                      matching (see below)                    
                                                                              
                               Mode . and [^...] match ^ and $ match line     
                                    newlines           boundaries             
                               s    yes                no                     
                               w    yes                yes                    
                               p    no                 no                     
                               m/n  no                 yes                    
   repeat(input: string,       Concatenates input repeat_counter number of    
   repeat_counter: int) →      times.                                         
   string                                                                     
                               For example, repeat('dog', 2) returns dogdog.  
   replace(input: string,      Replaces all occurrences of find with replace  
   find: string, replace:      in input                                       
   string) → string            
   reverse(val: string) →      Reverses the order of the string’s characters. 
   string                      
   right(input: bytes,         Returns the last return_set bytes from input.  
   return_set: int) → bytes    
   right(input: string,        Returns the last return_set characters from    
   return_set: int) → string   input.                                         
   rpad(string: string,        Pads string to length by adding ’ ’ to the     
   length: int) → string       right of string. If string is longer than      
                               length it is truncated.                        
   rpad(string: string,        Pads string to length by adding fill to the    
   length: int, fill: string)  right of string. If string is longer than      
   → string                    length it is truncated.                        
                               Removes any characters included in trim_chars  
   rtrim(input: string,        from the end (right-hand side) of input        
   trim_chars: string) →       (applies recursively).                         
   string                                                                     
                               For example, rtrim('doggie', 'ei') returns     
                               dogg.                                          
   rtrim(val: string) → string Removes all spaces from the end (right-hand    
                               side) of val.                                  
   set_bit(bit_string: varbit,                                                
   index: int, to_set: int) →  Updates a bit at given index in the bit array.
   varbit                      
   set_bit(byte_string: bytes, Updates a bit at given index in the byte       
   index: int, to_set: int) →  array.                                         
   bytes                       
   sha1(bytes...) → string     Calculates the SHA1 hash value of a set of     
                               values.                                        
   sha1(string...) → string    Calculates the SHA1 hash value of a set of     
                               values.                                        
   sha256(bytes...) → string   Calculates the SHA256 hash value of a set of   
                               values.                                        
   sha256(string...) → string  Calculates the SHA256 hash value of a set of   
                               values.                                        
   sha512(bytes...) → string   Calculates the SHA512 hash value of a set of   
                               values.                                        
   sha512(string...) → string  Calculates the SHA512 hash value of a set of   
                               values.                                        
                               Splits input on delimiter and return the value 
   split_part(input: string,   in the return_index_pos position (starting at  
   delimiter: string,          1).                                            
   return_index_pos: int) →                                                   
   string                      For example,                                   
                               split_part('123.456.789.0','.',3)returns 789.  
   strpos(input: bytes, find:  Calculates the position where the byte         
   bytes) → int                subarray find begins in input.                 
                               Calculates the position where the string find  
   strpos(input: string, find: begins in input.                               
   string) → int                                                              
                               For example, strpos('doggie', 'gie') returns   
                               4.                                             
   strpos(input: varbit, find: Calculates the position where the bit subarray 
   varbit) → int               find begins in input.                          
   substr(input: bytes,        Returns a byte subarray of input starting at   
   start_pos: int) → bytes     start_pos (count starts at 1).                 
   substr(input: bytes,        Returns a byte subarray of input starting at   
   start_pos: int, length:     start_pos (count starts at 1) and including up 
   int) → bytes                to length characters.                          
   substr(input: string,       Returns a substring of input that matches the  
   regex: string) → string     regular expression regex.                      
   substr(input: string,       Returns a substring of input that matches the  
   regex: string, escape_char: regular expression regex using escape_char as  
   string) → string            your escape character instead of </code>.      
   substr(input: string,       Returns a substring of input starting at       
   start_pos: int) → string    start_pos (count starts at 1).                 
   substr(input: string,       Returns a substring of input starting at       
   start_pos: int, length:     start_pos (count starts at 1) and including up 
   int) → string               to length characters.                          
   substr(input: varbit,       Returns a bit subarray of input starting at    
   start_pos: int) → varbit    start_pos (count starts at 1).                 
   substr(input: varbit,       Returns a bit subarray of input starting at    
   start_pos: int, length:     start_pos (count starts at 1) and including up 
   int) → varbit               to length characters.                          
   substring(input: bytes,     Returns a byte subarray of input starting at   
   start_pos: int) → bytes     start_pos (count starts at 1).                 
   substring(input: bytes,     Returns a byte subarray of input starting at   
   start_pos: int, length:     start_pos (count starts at 1) and including up 
   int) → bytes                to length characters.                          
   substring(input: string,    Returns a substring of input that matches the  
   regex: string) → string     regular expression regex.                      
   substring(input: string,    Returns a substring of input that matches the  
   regex: string, escape_char: regular expression regex using escape_char as  
   string) → string            your escape character instead of </code>.      
   substring(input: string,    Returns a substring of input starting at       
   start_pos: int) → string    start_pos (count starts at 1).                 
   substring(input: string,    Returns a substring of input starting at       
   start_pos: int, length:     start_pos (count starts at 1) and including up 
   int) → string               to length characters.                          
   substring(input: varbit,    Returns a bit subarray of input starting at    
   start_pos: int) → varbit    start_pos (count starts at 1).                 
   substring(input: varbit,    Returns a bit subarray of input starting at    
   start_pos: int, length:     start_pos (count starts at 1) and including up 
   int) → varbit               to length characters.                          
   to_english(val: int) →      This function enunciates the value of its      
   string                      argument using English cardinals.              
   to_hex(val: bytes) → string Converts val to its hexadecimal                
                               representation.                                
   to_hex(val: int) → string   Converts val to its hexadecimal                
                               representation.                                
   to_hex(val: string) →       Converts val to its hexadecimal                
   string                      representation.                                
   to_ip(val: string) → bytes  Converts the character string representation   
                               of an IP to its byte string representation.    
   to_uuid(val: string) →      Converts the character string representation   
   bytes                       of a UUID to its byte string representation.   
                               In input, replaces the first character from    
   translate(input: string,    find with the first character in replace;      
   find: string, replace:      repeat for each character in find.             
   string) → string                                                           
                               For example, translate('doggie', 'dog',        
                               '123'); returns 1233ie.                        
   upper(val: string) → string Converts all characters in val to their to     
                               their upper-case equivalents.                  

  System info functions

Function → Returns                                     Description                                            
                                                       Returns the logical time of the current transaction.   
                                                                                                              
                                                       This function is reserved for testing purposes by      
                                                       CockroachDB developers and its definition may change   
cluster_logical_timestamp() → decimal                  without prior notice.                                  
                                                                                                              
                                                       Note that uses of this function disable server-side    
                                                       optimizations and may increase either contention or    
                                                       retry errors, or both.                                 
                                                       Runs a consistency check on ranges touching the        
                                                       specified key range. an empty start or end key is      
                                                       treated as the minimum and maximum possible,           
                                                       respectively. stats_only should only be set to false   
crdb_internal.check_consistency(stats_only: bool,      when targeting a small number of ranges to avoid       
start_key: bytes, end_key: bytes) → tuple{int AS       overloading the cluster. Each returned row contains    
range_id, bytes AS start_key, string AS                the range ID, the status (a                            
start_key_pretty, string AS status, string AS detail}  roachpb.CheckConsistencyResponse_Status), and verbose  
                                                       detail.                                                
                                                                                                              
                                                       Example usage: SELECT * FROM                           
                                                       crdb_internal.check_consistency(true, ‘\x02’, ‘\x04’)  
crdb_internal.cluster_id() → uuid                      Returns the cluster ID.                                
crdb_internal.cluster_name() → string                  Returns the cluster name.                              
crdb_internal.completed_migrations() → string[]        This function is used only by CockroachDB’s developers 
                                                       for testing purposes.                                  
crdb_internal.encode_key(table_id: int, index_id: int, Generate the key for a row on a particular table and   
row_tuple: anyelement) → bytes                         index.                                                 
crdb_internal.force_assertion_error(msg: string) → int This function is used only by CockroachDB’s developers 
                                                       for testing purposes.                                  
crdb_internal.force_error(errorCode: string, msg:      This function is used only by CockroachDB’s developers 
string) → int                                          for testing purposes.                                  
crdb_internal.force_log_fatal(msg: string) → int       This function is used only by CockroachDB’s developers 
                                                       for testing purposes.                                  
crdb_internal.force_panic(msg: string) → int           This function is used only by CockroachDB’s developers 
                                                       for testing purposes.                                  
crdb_internal.force_retry(val: interval) → int         This function is used only by CockroachDB’s developers 
                                                       for testing purposes.                                  
crdb_internal.get_namespace_id(parent_id: int, name:   
string) → int                                          
crdb_internal.get_zone_config(namespace_id: int) →     
bytes                                                  
crdb_internal.is_admin() → bool                        Retrieves the current user’s admin status.             
crdb_internal.lease_holder(key: bytes) → int           This function is used to fetch the leaseholder         
                                                       corresponding to a request key                         
crdb_internal.locality_value(key: string) → string     Returns the value of the specified locality key.       
crdb_internal.no_constant_folding(input: anyelement) → This function is used only by CockroachDB’s developers 
anyelement                                             for testing purposes.                                  
crdb_internal.node_executable_version() → string       Returns the version of CockroachDB this node is        
                                                       running.                                               
crdb_internal.notice(msg: string) → int                This function is used only by CockroachDB’s developers 
                                                       for testing purposes.                                  
crdb_internal.notice(severity: string, msg: string) →  This function is used only by CockroachDB’s developers 
int                                                    for testing purposes.                                  
crdb_internal.num_geo_inverted_index_entries(table_id: This function is used only by CockroachDB’s developers 
int, index_id: int, val: geography) → int              for testing purposes.                                  
crdb_internal.num_geo_inverted_index_entries(table_id: This function is used only by CockroachDB’s developers 
int, index_id: int, val: geometry) → int               for testing purposes.                                  
crdb_internal.num_inverted_index_entries(val:          This function is used only by CockroachDB’s developers 
anyelement[]) → int                                    for testing purposes.                                  
crdb_internal.num_inverted_index_entries(val: jsonb) → This function is used only by CockroachDB’s developers 
int                                                    for testing purposes.                                  
crdb_internal.pretty_key(raw_key: bytes, skip_fields:  This function is used only by CockroachDB’s developers 
int) → string                                          for testing purposes.                                  
crdb_internal.range_stats(key: bytes) → jsonb          This function is used to retrieve range statistics     
                                                       information as a JSON object.                          
crdb_internal.round_decimal_values(val: decimal,       This function is used internally to round decimal      
scale: int) → decimal                                  values during mutations.                               
crdb_internal.round_decimal_values(val: decimal[],     This function is used internally to round decimal      
scale: int) → decimal[]                                array values during mutations.                         
                                                       Set the equivalent of the --vmodule flag on the        
                                                       gateway node processing this request; it affords       
crdb_internal.set_vmodule(vmodule_string: string) →    control over the logging verbosity of different files. 
int                                                    Example syntax:                                        
                                                       crdb_internal.set_vmodule('recordio=2,file=1,gfs*=3'). 
                                                       Reset with: crdb_internal.set_vmodule(''). Raising the 
                                                       verbosity can severely affect performance.             
current_database() → string                            Returns the current database.                          
current_schema() → string                              Returns the current schema.                            
current_schemas(include_pg_catalog: bool) → string[]   Returns the valid schemas in the search path.          
current_user() → string                                Returns the current user. This function is provided    
                                                       for compatibility with PostgreSQL.                     
version() → string                                     Returns the node’s version of CockroachDB.             

  TIMETZ functions

   Function → Returns                    Description                          
   current_time() → time                 Returns the current transaction’s    
                                         time with no time zone.              
                                         Returns the current transaction’s    
                                         time with time zone.                 
   current_time() → timetz                                                    
                                         This function is the preferred       
                                         overload and will be evaluated by    
                                         default.                             
   current_time(precision: int) → time   Returns the current transaction’s    
                                         time with no time zone.              
                                         Returns the current transaction’s    
                                         time with time zone.                 
   current_time(precision: int) → timetz                                      
                                         This function is the preferred       
                                         overload and will be evaluated by    
                                         default.                             
                                         Returns the current transaction’s    
                                         time with no time zone.              
   localtime() → time                                                         
                                         This function is the preferred       
                                         overload and will be evaluated by    
                                         default.                             
   localtime() → timetz                  Returns the current transaction’s    
                                         time with time zone.                 
                                         Returns the current transaction’s    
                                         time with no time zone.              
   localtime(precision: int) → time                                           
                                         This function is the preferred       
                                         overload and will be evaluated by    
                                         default.                             
   localtime(precision: int) → timetz    Returns the current transaction’s    
                                         time with time zone.                 

  TUPLE functions

   Function → Returns              Description                       
   row_to_json(row: tuple) → jsonb Returns the row as a JSON object. 

  Compatibility functions

   Function → Returns                              Description                
                                                   Returns the SQL name of a  
                                                   data type that is          
   format_type(type_oid: oid, typemod: int) →      identified by its type OID 
   string                                          and possibly a type        
                                                   modifier. Currently, the   
                                                   type modifier is ignored.  
                                                   Returns the current        
   getdatabaseencoding() → string                  encoding name used by the  
                                                   database.                  
                                                   Returns whether or not the 
   has_any_column_privilege(table: string,         current user has           
   privilege: string) → bool                       privileges for any column  
                                                   of table.                  
                                                   Returns whether or not the 
   has_any_column_privilege(table: oid, privilege: current user has           
   string) → bool                                  privileges for any column  
                                                   of table.                  
   has_any_column_privilege(user: string, table:   Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   any column of table.       
   has_any_column_privilege(user: string, table:   Returns whether or not the 
   oid, privilege: string) → bool                  user has privileges for    
                                                   any column of table.       
   has_any_column_privilege(user: oid, table:      Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   any column of table.       
   has_any_column_privilege(user: oid, table: oid, Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   any column of table.       
   has_column_privilege(table: string, column:     Returns whether or not the 
   int, privilege: string) → bool                  current user has           
                                                   privileges for column.     
   has_column_privilege(table: string, column:     Returns whether or not the 
   string, privilege: string) → bool               current user has           
                                                   privileges for column.     
   has_column_privilege(table: oid, column: int,   Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for column.     
   has_column_privilege(table: oid, column:        Returns whether or not the 
   string, privilege: string) → bool               current user has           
                                                   privileges for column.     
   has_column_privilege(user: string, table:       Returns whether or not the 
   string, column: int, privilege: string) → bool  user has privileges for    
                                                   column.                    
   has_column_privilege(user: string, table:       Returns whether or not the 
   string, column: string, privilege: string) →    user has privileges for    
   bool                                            column.                    
   has_column_privilege(user: string, table: oid,  Returns whether or not the 
   column: int, privilege: string) → bool          user has privileges for    
                                                   column.                    
   has_column_privilege(user: string, table: oid,  Returns whether or not the 
   column: string, privilege: string) → bool       user has privileges for    
                                                   column.                    
   has_column_privilege(user: oid, table: string,  Returns whether or not the 
   column: int, privilege: string) → bool          user has privileges for    
                                                   column.                    
   has_column_privilege(user: oid, table: string,  Returns whether or not the 
   column: string, privilege: string) → bool       user has privileges for    
                                                   column.                    
   has_column_privilege(user: oid, table: oid,     Returns whether or not the 
   column: int, privilege: string) → bool          user has privileges for    
                                                   column.                    
   has_column_privilege(user: oid, table: oid,     Returns whether or not the 
   column: string, privilege: string) → bool       user has privileges for    
                                                   column.                    
   has_database_privilege(database: string,        Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for database.   
   has_database_privilege(database: oid,           Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for database.   
   has_database_privilege(user: string, database:  Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   database.                  
   has_database_privilege(user: string, database:  Returns whether or not the 
   oid, privilege: string) → bool                  user has privileges for    
                                                   database.                  
   has_database_privilege(user: oid, database:     Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   database.                  
   has_database_privilege(user: oid, database:     Returns whether or not the 
   oid, privilege: string) → bool                  user has privileges for    
                                                   database.                  
                                                   Returns whether or not the 
   has_foreign_data_wrapper_privilege(fdw: string, current user has           
   privilege: string) → bool                       privileges for             
                                                   foreign-data wrapper.      
                                                   Returns whether or not the 
   has_foreign_data_wrapper_privilege(fdw: oid,    current user has           
   privilege: string) → bool                       privileges for             
                                                   foreign-data wrapper.      
   has_foreign_data_wrapper_privilege(user:        Returns whether or not the 
   string, fdw: string, privilege: string) → bool  user has privileges for    
                                                   foreign-data wrapper.      
   has_foreign_data_wrapper_privilege(user:        Returns whether or not the 
   string, fdw: oid, privilege: string) → bool     user has privileges for    
                                                   foreign-data wrapper.      
   has_foreign_data_wrapper_privilege(user: oid,   Returns whether or not the 
   fdw: string, privilege: string) → bool          user has privileges for    
                                                   foreign-data wrapper.      
   has_foreign_data_wrapper_privilege(user: oid,   Returns whether or not the 
   fdw: oid, privilege: string) → bool             user has privileges for    
                                                   foreign-data wrapper.      
   has_function_privilege(function: string,        Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for function.   
   has_function_privilege(function: oid,           Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for function.   
   has_function_privilege(user: string, function:  Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   function.                  
   has_function_privilege(user: string, function:  Returns whether or not the 
   oid, privilege: string) → bool                  user has privileges for    
                                                   function.                  
   has_function_privilege(user: oid, function:     Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   function.                  
   has_function_privilege(user: oid, function:     Returns whether or not the 
   oid, privilege: string) → bool                  user has privileges for    
                                                   function.                  
   has_language_privilege(language: string,        Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for language.   
   has_language_privilege(language: oid,           Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for language.   
   has_language_privilege(user: string, language:  Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   language.                  
   has_language_privilege(user: string, language:  Returns whether or not the 
   oid, privilege: string) → bool                  user has privileges for    
                                                   language.                  
   has_language_privilege(user: oid, language:     Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   language.                  
   has_language_privilege(user: oid, language:     Returns whether or not the 
   oid, privilege: string) → bool                  user has privileges for    
                                                   language.                  
   has_schema_privilege(schema: string, privilege: Returns whether or not the 
   string) → bool                                  current user has           
                                                   privileges for schema.     
   has_schema_privilege(schema: oid, privilege:    Returns whether or not the 
   string) → bool                                  current user has           
                                                   privileges for schema.     
   has_schema_privilege(user: string, schema:      Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   schema.                    
   has_schema_privilege(user: string, schema: oid, Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   schema.                    
   has_schema_privilege(user: oid, schema: string, Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   schema.                    
   has_schema_privilege(user: oid, schema: oid,    Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   schema.                    
   has_sequence_privilege(sequence: string,        Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for sequence.   
   has_sequence_privilege(sequence: oid,           Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for sequence.   
   has_sequence_privilege(user: string, sequence:  Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   sequence.                  
   has_sequence_privilege(user: string, sequence:  Returns whether or not the 
   oid, privilege: string) → bool                  user has privileges for    
                                                   sequence.                  
   has_sequence_privilege(user: oid, sequence:     Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   sequence.                  
   has_sequence_privilege(user: oid, sequence:     Returns whether or not the 
   oid, privilege: string) → bool                  user has privileges for    
                                                   sequence.                  
                                                   Returns whether or not the 
   has_server_privilege(server: string, privilege: current user has           
   string) → bool                                  privileges for foreign     
                                                   server.                    
                                                   Returns whether or not the 
   has_server_privilege(server: oid, privilege:    current user has           
   string) → bool                                  privileges for foreign     
                                                   server.                    
   has_server_privilege(user: string, server:      Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   foreign server.            
   has_server_privilege(user: string, server: oid, Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   foreign server.            
   has_server_privilege(user: oid, server: string, Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   foreign server.            
   has_server_privilege(user: oid, server: oid,    Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   foreign server.            
   has_table_privilege(table: string, privilege:   Returns whether or not the 
   string) → bool                                  current user has           
                                                   privileges for table.      
   has_table_privilege(table: oid, privilege:      Returns whether or not the 
   string) → bool                                  current user has           
                                                   privileges for table.      
   has_table_privilege(user: string, table:        Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   table.                     
   has_table_privilege(user: string, table: oid,   Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   table.                     
   has_table_privilege(user: oid, table: string,   Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   table.                     
   has_table_privilege(user: oid, table: oid,      Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   table.                     
   has_tablespace_privilege(tablespace: string,    Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for tablespace. 
   has_tablespace_privilege(tablespace: oid,       Returns whether or not the 
   privilege: string) → bool                       current user has           
                                                   privileges for tablespace. 
   has_tablespace_privilege(user: string,          Returns whether or not the 
   tablespace: string, privilege: string) → bool   user has privileges for    
                                                   tablespace.                
   has_tablespace_privilege(user: string,          Returns whether or not the 
   tablespace: oid, privilege: string) → bool      user has privileges for    
                                                   tablespace.                
   has_tablespace_privilege(user: oid, tablespace: Returns whether or not the 
   string, privilege: string) → bool               user has privileges for    
                                                   tablespace.                
   has_tablespace_privilege(user: oid, tablespace: Returns whether or not the 
   oid, privilege: string) → bool                  user has privileges for    
                                                   tablespace.                
   has_type_privilege(type: string, privilege:     Returns whether or not the 
   string) → bool                                  current user has           
                                                   privileges for type.       
   has_type_privilege(type: oid, privilege:        Returns whether or not the 
   string) → bool                                  current user has           
                                                   privileges for type.       
   has_type_privilege(user: string, type: string,  Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   type.                      
   has_type_privilege(user: string, type: oid,     Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   type.                      
   has_type_privilege(user: oid, type: string,     Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   type.                      
   has_type_privilege(user: oid, type: oid,        Returns whether or not the 
   privilege: string) → bool                       user has privileges for    
                                                   type.                      
   oid(int: int) → oid                             Converts an integer to an  
                                                   OID.                       
                                                   pg_sleep makes the current 
                                                   session’s process sleep    
                                                   until seconds seconds have 
   pg_sleep(seconds: float) → bool                 elapsed. seconds is a      
                                                   value of type double       
                                                   precision, so              
                                                   fractional-second delays   
                                                   can be specified.          

Aggregate functions

   For examples showing how to use aggregate functions, see the SELECT clause
   documentation.

   Note:

   Non-commutative aggregate functions are sensitive to the order in which
   the rows are processed in the surrounding SELECT clause. To specify the
   order in which input rows are processed, you can add an ORDER BY clause
   within the function argument list. For examples, see the SELECT clause
   documentation.

   Function → Returns                   Description                           
   array_agg(arg1: bool) → bool[]       Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: bytes) → bytes[]     Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: date) → date[]       Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: decimal) → decimal[] Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: float) → float[]     Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: inet) → inet[]       Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: int) → int[]         Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: interval) →          Aggregates the selected values into   
   interval[]                           an array.                             
   array_agg(arg1: string) → string[]   Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: time) → time[]       Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: timestamp) →         Aggregates the selected values into   
   timestamp[]                          an array.                             
   array_agg(arg1: timestamptz) →       Aggregates the selected values into   
   timestamptz[]                        an array.                             
   array_agg(arg1: uuid) → uuid[]       Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: geography) →         Aggregates the selected values into   
   geography[]                          an array.                             
   array_agg(arg1: geometry) →          Aggregates the selected values into   
   geometry[]                           an array.                             
   array_agg(arg1: oid) → oid[]         Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: timetz) → timetz[]   Aggregates the selected values into   
                                        an array.                             
   array_agg(arg1: varbit) → varbit[]   Aggregates the selected values into   
                                        an array.                             
   avg(arg1: decimal) → decimal         Calculates the average of the         
                                        selected values.                      
   avg(arg1: float) → float             Calculates the average of the         
                                        selected values.                      
   avg(arg1: int) → decimal             Calculates the average of the         
                                        selected values.                      
   avg(arg1: interval) → interval       Calculates the average of the         
                                        selected values.                      
                                        Calculates the bitwise AND of all     
   bit_and(arg1: int) → int             non-null input values, or null if     
                                        none.                                 
                                        Calculates the bitwise AND of all     
   bit_and(arg1: varbit) → varbit       non-null input values, or null if     
                                        none.                                 
                                        Calculates the bitwise OR of all      
   bit_or(arg1: int) → int              non-null input values, or null if     
                                        none.                                 
                                        Calculates the bitwise OR of all      
   bit_or(arg1: varbit) → varbit        non-null input values, or null if     
                                        none.                                 
   bool_and(arg1: bool) → bool          Calculates the boolean value of       
                                        ANDing all selected values.           
   bool_or(arg1: bool) → bool           Calculates the boolean value of ORing 
                                        all selected values.                  
   concat_agg(arg1: bytes) → bytes      Concatenates all selected values.     
   concat_agg(arg1: string) → string    Concatenates all selected values.     
   corr(arg1: float, arg2: float) →     Calculates the correlation            
   float                                coefficient of the selected values.   
   corr(arg1: float, arg2: int) → float Calculates the correlation            
                                        coefficient of the selected values.   
   corr(arg1: int, arg2: float) → float Calculates the correlation            
                                        coefficient of the selected values.   
   corr(arg1: int, arg2: int) → float   Calculates the correlation            
                                        coefficient of the selected values.   
   count(arg1: anyelement) → int        Calculates the number of selected     
                                        elements.                             
   count_rows() → int                   Calculates the number of rows.        
   every(arg1: bool) → bool             Calculates the boolean value of       
                                        ANDing all selected values.           
   json_agg(arg1: anyelement) → jsonb   Aggregates values as a JSON or JSONB  
                                        array.                                
   json_object_agg(arg1: string, arg2:  Aggregates values as a JSON or JSONB  
   anyelement) → jsonb                  object.                               
   jsonb_agg(arg1: anyelement) → jsonb  Aggregates values as a JSON or JSONB  
                                        array.                                
   jsonb_object_agg(arg1: string, arg2: Aggregates values as a JSON or JSONB  
   anyelement) → jsonb                  object.                               
   max(arg1: bool) → bool               Identifies the maximum selected       
                                        value.                                
   max(arg1: bytes) → bytes             Identifies the maximum selected       
                                        value.                                
   max(arg1: date) → date               Identifies the maximum selected       
                                        value.                                
   max(arg1: decimal) → decimal         Identifies the maximum selected       
                                        value.                                
   max(arg1: float) → float             Identifies the maximum selected       
                                        value.                                
   max(arg1: inet) → inet               Identifies the maximum selected       
                                        value.                                
   max(arg1: int) → int                 Identifies the maximum selected       
                                        value.                                
   max(arg1: interval) → interval       Identifies the maximum selected       
                                        value.                                
   max(arg1: string) → string           Identifies the maximum selected       
                                        value.                                
   max(arg1: time) → time               Identifies the maximum selected       
                                        value.                                
   max(arg1: timestamp) → timestamp     Identifies the maximum selected       
                                        value.                                
   max(arg1: timestamptz) → timestamptz Identifies the maximum selected       
                                        value.                                
   max(arg1: uuid) → uuid               Identifies the maximum selected       
                                        value.                                
   max(arg1: anyenum) → anyelement      Identifies the maximum selected       
                                        value.                                
   max(arg1: collatedstring{*}) →       Identifies the maximum selected       
   anyelement                           value.                                
   max(arg1: geography) → geography     Identifies the maximum selected       
                                        value.                                
   max(arg1: geometry) → geometry       Identifies the maximum selected       
                                        value.                                
   max(arg1: jsonb) → jsonb             Identifies the maximum selected       
                                        value.                                
   max(arg1: oid) → oid                 Identifies the maximum selected       
                                        value.                                
   max(arg1: timetz) → timetz           Identifies the maximum selected       
                                        value.                                
   max(arg1: varbit) → varbit           Identifies the maximum selected       
                                        value.                                
   min(arg1: bool) → bool               Identifies the minimum selected       
                                        value.                                
   min(arg1: bytes) → bytes             Identifies the minimum selected       
                                        value.                                
   min(arg1: date) → date               Identifies the minimum selected       
                                        value.                                
   min(arg1: decimal) → decimal         Identifies the minimum selected       
                                        value.                                
   min(arg1: float) → float             Identifies the minimum selected       
                                        value.                                
   min(arg1: inet) → inet               Identifies the minimum selected       
                                        value.                                
   min(arg1: int) → int                 Identifies the minimum selected       
                                        value.                                
   min(arg1: interval) → interval       Identifies the minimum selected       
                                        value.                                
   min(arg1: string) → string           Identifies the minimum selected       
                                        value.                                
   min(arg1: time) → time               Identifies the minimum selected       
                                        value.                                
   min(arg1: timestamp) → timestamp     Identifies the minimum selected       
                                        value.                                
   min(arg1: timestamptz) → timestamptz Identifies the minimum selected       
                                        value.                                
   min(arg1: uuid) → uuid               Identifies the minimum selected       
                                        value.                                
   min(arg1: anyenum) → anyelement      Identifies the minimum selected       
                                        value.                                
   min(arg1: collatedstring{*}) →       Identifies the minimum selected       
   anyelement                           value.                                
   min(arg1: geography) → geography     Identifies the minimum selected       
                                        value.                                
   min(arg1: geometry) → geometry       Identifies the minimum selected       
                                        value.                                
   min(arg1: jsonb) → jsonb             Identifies the minimum selected       
                                        value.                                
   min(arg1: oid) → oid                 Identifies the minimum selected       
                                        value.                                
   min(arg1: timetz) → timetz           Identifies the minimum selected       
                                        value.                                
   min(arg1: varbit) → varbit           Identifies the minimum selected       
                                        value.                                
                                        Continuous percentile: returns a      
                                        float corresponding to the specified  
   percentile_cont(arg1: float) → float fraction in the ordering,             
                                        interpolating between adjacent input  
                                        floats if needed.                     
                                        Continuous percentile: returns an     
   percentile_cont(arg1: float) →       interval corresponding to the         
   interval                             specified fraction in the ordering,   
                                        interpolating between adjacent input  
                                        intervals if needed.                  
                                        Continuous percentile: returns floats 
   percentile_cont(arg1: float[]) →     corresponding to the specified        
   float[]                              fractions in the ordering,            
                                        interpolating between adjacent input  
                                        floats if needed.                     
                                        Continuous percentile: returns        
   percentile_cont(arg1: float[]) →     intervals corresponding to the        
   interval[]                           specified fractions in the ordering,  
                                        interpolating between adjacent input  
                                        intervals if needed.                  
                                        Discrete percentile: returns the      
   percentile_disc(arg1: float) →       first input value whose position in   
   anyelement                           the ordering equals or exceeds the    
                                        specified fraction.                   
                                        Discrete percentile: returns input    
   percentile_disc(arg1: float[]) →     values whose position in the ordering 
   anyelement                           equals or exceeds the specified       
                                        fractions.                            
                                        Calculates the sum of squared         
   sqrdiff(arg1: decimal) → decimal     differences from the mean of the      
                                        selected values.                      
                                        Calculates the sum of squared         
   sqrdiff(arg1: float) → float         differences from the mean of the      
                                        selected values.                      
                                        Calculates the sum of squared         
   sqrdiff(arg1: int) → decimal         differences from the mean of the      
                                        selected values.                      
   stddev(arg1: decimal) → decimal      Calculates the standard deviation of  
                                        the selected values.                  
   stddev(arg1: float) → float          Calculates the standard deviation of  
                                        the selected values.                  
   stddev(arg1: int) → decimal          Calculates the standard deviation of  
                                        the selected values.                  
   stddev_samp(arg1: decimal) → decimal Calculates the standard deviation of  
                                        the selected values.                  
   stddev_samp(arg1: float) → float     Calculates the standard deviation of  
                                        the selected values.                  
   stddev_samp(arg1: int) → decimal     Calculates the standard deviation of  
                                        the selected values.                  
   string_agg(arg1: bytes, arg2: bytes) Concatenates all selected values      
   → bytes                              using the provided delimiter.         
   string_agg(arg1: string, arg2:       Concatenates all selected values      
   string) → string                     using the provided delimiter.         
   sum(arg1: decimal) → decimal         Calculates the sum of the selected    
                                        values.                               
   sum(arg1: float) → float             Calculates the sum of the selected    
                                        values.                               
   sum(arg1: int) → decimal             Calculates the sum of the selected    
                                        values.                               
   sum(arg1: interval) → interval       Calculates the sum of the selected    
                                        values.                               
   sum_int(arg1: int) → int             Calculates the sum of the selected    
                                        values.                               
   var_samp(arg1: decimal) → decimal    Calculates the variance of the        
                                        selected values.                      
   var_samp(arg1: float) → float        Calculates the variance of the        
                                        selected values.                      
   var_samp(arg1: int) → decimal        Calculates the variance of the        
                                        selected values.                      
   variance(arg1: decimal) → decimal    Calculates the variance of the        
                                        selected values.                      
   variance(arg1: float) → float        Calculates the variance of the        
                                        selected values.                      
   variance(arg1: int) → decimal        Calculates the variance of the        
                                        selected values.                      
   xor_agg(arg1: bytes) → bytes         Calculates the bitwise XOR of the     
                                        selected values.                      
   xor_agg(arg1: int) → int             Calculates the bitwise XOR of the     
                                        selected values.                      

Window functions

   Function → Returns              Description                                
                                   Calculates the relative rank of the        
   cume_dist() → float             current row: (number of rows preceding or  
                                   peer with current row) / (total rows).     
                                   Calculates the rank of the current row     
   dense_rank() → int              without gaps; this function counts peer    
                                   groups.                                    
   first_value(val: bool) → bool   Returns val evaluated at the row that is   
                                   the first row of the window frame.         
   first_value(val: bytes) → bytes Returns val evaluated at the row that is   
                                   the first row of the window frame.         
   first_value(val: date) → date   Returns val evaluated at the row that is   
                                   the first row of the window frame.         
   first_value(val: decimal) →     Returns val evaluated at the row that is   
   decimal                         the first row of the window frame.         
   first_value(val: float) → float Returns val evaluated at the row that is   
                                   the first row of the window frame.         
   first_value(val: inet) → inet   Returns val evaluated at the row that is   
                                   the first row of the window frame.         
   first_value(val: int) → int     Returns val evaluated at the row that is   
                                   the first row of the window frame.         
   first_value(val: interval) →    Returns val evaluated at the row that is   
   interval                        the first row of the window frame.         
   first_value(val: string) →      Returns val evaluated at the row that is   
   string                          the first row of the window frame.         
   first_value(val: time) → time   Returns val evaluated at the row that is   
                                   the first row of the window frame.         
   first_value(val: timestamp) →   Returns val evaluated at the row that is   
   timestamp                       the first row of the window frame.         
   first_value(val: timestamptz) → Returns val evaluated at the row that is   
   timestamptz                     the first row of the window frame.         
   first_value(val: uuid) → uuid   Returns val evaluated at the row that is   
                                   the first row of the window frame.         
   first_value(val: geography) →   Returns val evaluated at the row that is   
   geography                       the first row of the window frame.         
   first_value(val: geometry) →    Returns val evaluated at the row that is   
   geometry                        the first row of the window frame.         
   first_value(val: jsonb) → jsonb Returns val evaluated at the row that is   
                                   the first row of the window frame.         
   first_value(val: oid) → oid     Returns val evaluated at the row that is   
                                   the first row of the window frame.         
   first_value(val: timetz) →      Returns val evaluated at the row that is   
   timetz                          the first row of the window frame.         
   first_value(val: varbit) →      Returns val evaluated at the row that is   
   varbit                          the first row of the window frame.         
                                   Returns val evaluated at the previous row  
   lag(val: bool) → bool           within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: bool, n: int) → bool   partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: bool, n: int, default: partition; if there is no such, row,       
   bool) → bool                    instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: bytes) → bytes         within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: bytes, n: int) → bytes partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: bytes, n: int,         partition; if there is no such, row,       
   default: bytes) → bytes         instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: date) → date           within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: date, n: int) → date   partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: date, n: int, default: partition; if there is no such, row,       
   date) → date                    instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: decimal) → decimal     within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lag(val: decimal, n: int) →     rows before the current row within its     
   decimal                         partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: decimal, n: int,       partition; if there is no such, row,       
   default: decimal) → decimal     instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: float) → float         within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: float, n: int) → float partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: float, n: int,         partition; if there is no such, row,       
   default: float) → float         instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: inet) → inet           within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: inet, n: int) → inet   partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: inet, n: int, default: partition; if there is no such, row,       
   inet) → inet                    instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: int) → int             within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: int, n: int) → int     partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: int, n: int, default:  partition; if there is no such, row,       
   int) → int                      instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: interval) → interval   within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lag(val: interval, n: int) →    rows before the current row within its     
   interval                        partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: interval, n: int,      partition; if there is no such, row,       
   default: interval) → interval   instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: string) → string       within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lag(val: string, n: int) →      rows before the current row within its     
   string                          partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: string, n: int,        partition; if there is no such, row,       
   default: string) → string       instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: time) → time           within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: time, n: int) → time   partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: time, n: int, default: partition; if there is no such, row,       
   time) → time                    instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: timestamp) → timestamp within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lag(val: timestamp, n: int) →   rows before the current row within its     
   timestamp                       partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: timestamp, n: int,     partition; if there is no such, row,       
   default: timestamp) → timestamp instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
   lag(val: timestamptz) →         Returns val evaluated at the previous row  
   timestamptz                     within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lag(val: timestamptz, n: int) → rows before the current row within its     
   timestamptz                     partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: timestamptz, n: int,   partition; if there is no such, row,       
   default: timestamptz) →         instead returns default (which must be of  
   timestamptz                     the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: uuid) → uuid           within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: uuid, n: int) → uuid   partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: uuid, n: int, default: partition; if there is no such, row,       
   uuid) → uuid                    instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: geography) → geography within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lag(val: geography, n: int) →   rows before the current row within its     
   geography                       partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: geography, n: int,     partition; if there is no such, row,       
   default: geography) → geography instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: geometry) → geometry   within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lag(val: geometry, n: int) →    rows before the current row within its     
   geometry                        partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: geometry, n: int,      partition; if there is no such, row,       
   default: geometry) → geometry   instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: jsonb) → jsonb         within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: jsonb, n: int) → jsonb partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: jsonb, n: int,         partition; if there is no such, row,       
   default: jsonb) → jsonb         instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: oid) → oid             within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: oid, n: int) → oid     partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: oid, n: int, default:  partition; if there is no such, row,       
   oid) → oid                      instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: timetz) → timetz       within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lag(val: timetz, n: int) →      rows before the current row within its     
   timetz                          partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: timetz, n: int,        partition; if there is no such, row,       
   default: timetz) → timetz       instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the previous row  
   lag(val: varbit) → varbit       within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lag(val: varbit, n: int) →      rows before the current row within its     
   varbit                          partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows before the current row within its     
   lag(val: varbit, n: int,        partition; if there is no such, row,       
   default: varbit) → varbit       instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
   last_value(val: bool) → bool    Returns val evaluated at the row that is   
                                   the last row of the window frame.          
   last_value(val: bytes) → bytes  Returns val evaluated at the row that is   
                                   the last row of the window frame.          
   last_value(val: date) → date    Returns val evaluated at the row that is   
                                   the last row of the window frame.          
   last_value(val: decimal) →      Returns val evaluated at the row that is   
   decimal                         the last row of the window frame.          
   last_value(val: float) → float  Returns val evaluated at the row that is   
                                   the last row of the window frame.          
   last_value(val: inet) → inet    Returns val evaluated at the row that is   
                                   the last row of the window frame.          
   last_value(val: int) → int      Returns val evaluated at the row that is   
                                   the last row of the window frame.          
   last_value(val: interval) →     Returns val evaluated at the row that is   
   interval                        the last row of the window frame.          
   last_value(val: string) →       Returns val evaluated at the row that is   
   string                          the last row of the window frame.          
   last_value(val: time) → time    Returns val evaluated at the row that is   
                                   the last row of the window frame.          
   last_value(val: timestamp) →    Returns val evaluated at the row that is   
   timestamp                       the last row of the window frame.          
   last_value(val: timestamptz) →  Returns val evaluated at the row that is   
   timestamptz                     the last row of the window frame.          
   last_value(val: uuid) → uuid    Returns val evaluated at the row that is   
                                   the last row of the window frame.          
   last_value(val: geography) →    Returns val evaluated at the row that is   
   geography                       the last row of the window frame.          
   last_value(val: geometry) →     Returns val evaluated at the row that is   
   geometry                        the last row of the window frame.          
   last_value(val: jsonb) → jsonb  Returns val evaluated at the row that is   
                                   the last row of the window frame.          
   last_value(val: oid) → oid      Returns val evaluated at the row that is   
                                   the last row of the window frame.          
   last_value(val: timetz) →       Returns val evaluated at the row that is   
   timetz                          the last row of the window frame.          
   last_value(val: varbit) →       Returns val evaluated at the row that is   
   varbit                          the last row of the window frame.          
                                   Returns val evaluated at the following row 
   lead(val: bool) → bool          within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: bool, n: int) → bool  partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: bool, n: int,         partition; if there is no such, row,       
   default: bool) → bool           instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: bytes) → bytes        within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: bytes, n: int) →      rows after the current row within its      
   bytes                           partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: bytes, n: int,        partition; if there is no such, row,       
   default: bytes) → bytes         instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: date) → date          within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: date, n: int) → date  partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: date, n: int,         partition; if there is no such, row,       
   default: date) → date           instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: decimal) → decimal    within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: decimal, n: int) →    rows after the current row within its      
   decimal                         partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: decimal, n: int,      partition; if there is no such, row,       
   default: decimal) → decimal     instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: float) → float        within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: float, n: int) →      rows after the current row within its      
   float                           partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: float, n: int,        partition; if there is no such, row,       
   default: float) → float         instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: inet) → inet          within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: inet, n: int) → inet  partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: inet, n: int,         partition; if there is no such, row,       
   default: inet) → inet           instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: int) → int            within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: int, n: int) → int    partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: int, n: int, default: partition; if there is no such, row,       
   int) → int                      instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: interval) → interval  within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: interval, n: int) →   rows after the current row within its      
   interval                        partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: interval, n: int,     partition; if there is no such, row,       
   default: interval) → interval   instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: string) → string      within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: string, n: int) →     rows after the current row within its      
   string                          partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: string, n: int,       partition; if there is no such, row,       
   default: string) → string       instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: time) → time          within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: time, n: int) → time  partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: time, n: int,         partition; if there is no such, row,       
   default: time) → time           instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
   lead(val: timestamp) →          Returns val evaluated at the following row 
   timestamp                       within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: timestamp, n: int) →  rows after the current row within its      
   timestamp                       partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: timestamp, n: int,    partition; if there is no such, row,       
   default: timestamp) → timestamp instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
   lead(val: timestamptz) →        Returns val evaluated at the following row 
   timestamptz                     within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: timestamptz, n: int)  rows after the current row within its      
   → timestamptz                   partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: timestamptz, n: int,  partition; if there is no such, row,       
   default: timestamptz) →         instead returns default (which must be of  
   timestamptz                     the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: uuid) → uuid          within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: uuid, n: int) → uuid  partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: uuid, n: int,         partition; if there is no such, row,       
   default: uuid) → uuid           instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
   lead(val: geography) →          Returns val evaluated at the following row 
   geography                       within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: geography, n: int) →  rows after the current row within its      
   geography                       partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: geography, n: int,    partition; if there is no such, row,       
   default: geography) → geography instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: geometry) → geometry  within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: geometry, n: int) →   rows after the current row within its      
   geometry                        partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: geometry, n: int,     partition; if there is no such, row,       
   default: geometry) → geometry   instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: jsonb) → jsonb        within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: jsonb, n: int) →      rows after the current row within its      
   jsonb                           partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: jsonb, n: int,        partition; if there is no such, row,       
   default: jsonb) → jsonb         instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: oid) → oid            within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: oid, n: int) → oid    partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: oid, n: int, default: partition; if there is no such, row,       
   oid) → oid                      instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: timetz) → timetz      within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: timetz, n: int) →     rows after the current row within its      
   timetz                          partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: timetz, n: int,       partition; if there is no such, row,       
   default: timetz) → timetz       instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
                                   Returns val evaluated at the following row 
   lead(val: varbit) → varbit      within current row’s partition; if there   
                                   is no such row, instead returns null.      
                                   Returns val evaluated at the row that is n 
   lead(val: varbit, n: int) →     rows after the current row within its      
   varbit                          partition; if there is no such row,        
                                   instead returns null. n is evaluated with  
                                   respect to the current row.                
                                   Returns val evaluated at the row that is n 
                                   rows after the current row within its      
   lead(val: varbit, n: int,       partition; if there is no such, row,       
   default: varbit) → varbit       instead returns default (which must be of  
                                   the same type as val). Both n and default  
                                   are evaluated with respect to the current  
                                   row.                                       
   nth_value(val: bool, n: int) →  Returns val evaluated at the row that is   
   bool                            the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: bytes, n: int) → Returns val evaluated at the row that is   
   bytes                           the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: date, n: int) →  Returns val evaluated at the row that is   
   date                            the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: decimal, n: int) Returns val evaluated at the row that is   
   → decimal                       the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: float, n: int) → Returns val evaluated at the row that is   
   float                           the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: inet, n: int) →  Returns val evaluated at the row that is   
   inet                            the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: int, n: int) →   Returns val evaluated at the row that is   
   int                             the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: interval, n:     Returns val evaluated at the row that is   
   int) → interval                 the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: string, n: int)  Returns val evaluated at the row that is   
   → string                        the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: time, n: int) →  Returns val evaluated at the row that is   
   time                            the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: timestamp, n:    Returns val evaluated at the row that is   
   int) → timestamp                the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: timestamptz, n:  Returns val evaluated at the row that is   
   int) → timestamptz              the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: uuid, n: int) →  Returns val evaluated at the row that is   
   uuid                            the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: geography, n:    Returns val evaluated at the row that is   
   int) → geography                the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: geometry, n:     Returns val evaluated at the row that is   
   int) → geometry                 the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: jsonb, n: int) → Returns val evaluated at the row that is   
   jsonb                           the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: oid, n: int) →   Returns val evaluated at the row that is   
   oid                             the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: timetz, n: int)  Returns val evaluated at the row that is   
   → timetz                        the nth row of the window frame (counting  
                                   from 1); null if no such row.              
   nth_value(val: varbit, n: int)  Returns val evaluated at the row that is   
   → varbit                        the nth row of the window frame (counting  
                                   from 1); null if no such row.              
                                   Calculates an integer ranging from 1 to n, 
   ntile(n: int) → int             dividing the partition as equally as       
                                   possible.                                  
                                   Calculates the relative rank of the        
   percent_rank() → float          current row: (rank - 1) / (total rows -    
                                   1).                                        
                                   Calculates the rank of the current row     
   rank() → int                    with gaps; same as row_number of its first 
                                   peer.                                      
   row_number() → int              Calculates the number of the current row   
                                   within its partition, counting from 1.     

Operators

   The following table lists all CockroachDB operators from highest to lowest
   precedence, i.e., the order in which they will be evaluated within a
   statement. Operators with the same precedence are left associative. This
   means that those operators are grouped together starting from the left and
   moving right.

   Order of   Operator         Name                                 Operator  
   Precedence                                                       Arity     
   1          .                Member field access operator         binary    
   2          ::               Type cast                            binary    
   3          -                Unary minus                          unary     
                                                                    (prefix)  
              ~                Bitwise not                          unary     
                                                                    (prefix)  
   4          ^                Exponentiation                       binary    
   5          *                Multiplication                       binary    
              /                Division                             binary    
              //               Floor division                       binary    
              %                Modulo                               binary    
   6          +                Addition                             binary    
              -                Subtraction                          binary    
   7          <<               Bitwise left-shift                   binary    
              >>               Bitwise right-shift                  binary    
   8          &                Bitwise AND                          binary    
   9          #                Bitwise XOR                          binary    
   10         |                Bitwise OR                           binary    
   11         ||               Concatenation                        binary    
              < ANY, SOME, ALL Multi-valued "less than" comparison  binary    
              > ANY, SOME, ALL Multi-valued "greater than"          binary    
                               comparison                           
              = ANY, SOME, ALL Multi-valued "equal" comparison      binary    
              <= ANY, SOME,    Multi-valued "less than or equal"    binary    
              ALL              comparison                           
              >= ANY, SOME,    Multi-valued "greater than or equal" binary    
              ALL              comparison                           
              <> ANY / != ANY,                                                
              <> SOME / !=     Multi-valued "not equal" comparison  binary
              SOME, <> ALL /   
              != ALL           
              [NOT] LIKE ANY,                                                 
              [NOT] LIKE SOME, Multi-valued LIKE comparison         binary
              [NOT] LIKE ALL   
              [NOT] ILIKE ANY,                                                
              [NOT] ILIKE      Multi-valued ILIKE comparison        binary
              SOME, [NOT]      
              ILIKE ALL        
   12         [NOT] BETWEEN    Value is [not] within the range      binary    
                               specified                            
                               Like [NOT] BETWEEN, but in                     
                               non-sorted order. For example,       
              [NOT] BETWEEN    whereas a BETWEEN b AND c means b <= binary
              SYMMETRIC        a <= c, a BETWEEN SYMMETRIC b AND c  
                               means (b <= a <= c) OR (c <= a <=    
                               b).                                  
              [NOT] IN         Value is [not] in the set of values  binary    
                               specified                            
              [NOT] LIKE       Matches [or not] LIKE expression,    binary    
                               case sensitive                       
              [NOT] ILIKE      Matches [or not] LIKE expression,    binary    
                               case insensitive                     
              [NOT] SIMILAR    Matches [or not] SIMILAR TO regular  binary    
                               expression                           
              ~                Matches regular expression, case     binary    
                               sensitive                            
              !~               Does not match regular expression,   binary    
                               case sensitive                       
              ~*               Matches regular expression, case     binary    
                               insensitive                          
              !~*              Does not match regular expression,   binary    
                               case insensitive                     
   13         =                Equal                                binary    
              <                Less than                            binary    
              >                Greater than                         binary    
              <=               Less than or equal to                binary    
              >=               Greater than or equal to             binary    
              !=, <>           Not equal                            binary    
   14         IS [DISTINCT     Equal, considering NULL as value     binary    
              FROM]            
              IS NOT [DISTINCT a IS NOT b equivalent to NOT (a IS   binary    
              FROM]            b)                                   
              ISNULL, IS                                                      
              UNKNOWN ,        Equivalent to IS NULL / IS NOT NULL  unary     
              NOTNULL, IS NOT                                       (postfix)
              UNKNOWN          
              IS NAN, IS NOT   Comparison with the floating-point   unary     
              NAN              NaN value                            (postfix) 
              IS OF(...)       Type predicate                       unary     
                                                                    (postfix) 
   15         NOT              Logical NOT                          unary     
   16         AND              Logical AND                          binary    
   17         OR               Logical OR                           binary    

  Supported operations

   #               Return 
   int # int       int    
   varbit # varbit varbit 

   #>                Return 
   jsonb #> string[] jsonb  

   #>>                Return 
   jsonb #>> string[] string 

   %                 Return  
   decimal % decimal decimal 
   decimal % int     decimal 
   float % float     float   
   int % decimal     decimal 
   int % int         int     

   &               Return 
   inet & inet     inet   
   int & int       int    
   varbit & varbit varbit 

   &&                       Return 
   anyelement && anyelement bool   
   inet && inet             bool   

   *                  Return   
   decimal * decimal  decimal  
   decimal * int      decimal  
   decimal * interval interval 
   float * float      float    
   float * interval   interval 
   int * decimal      decimal  
   int * int          int      
   int * interval     interval 
   interval * decimal interval 
   interval * float   interval 
   interval * int     interval 

   +                      Return      
   date + int             date        
   date + interval        timestamp   
   date + time            timestamp   
   date + timetz          timestamptz 
   decimal + decimal      decimal     
   decimal + int          decimal     
   float + float          float       
   inet + int             inet        
   int + date             date        
   int + decimal          decimal     
   int + inet             inet        
   int + int              int         
   interval + date        timestamp   
   interval + interval    interval    
   interval + time        time        
   interval + timestamp   timestamp   
   interval + timestamptz timestamptz 
   interval + timetz      timetz      
   time + date            timestamp   
   time + interval        time        
   timestamp + interval   timestamp   
   timestamptz + interval timestamptz 
   timetz + date          timestamptz 
   timetz + interval      timetz      

   -                         Return      
   -decimal                  decimal     
   -float                    float       
   -int                      int         
   -interval                 interval    
   date - date               int         
   date - int                date        
   date - interval           timestamp   
   date - time               timestamp   
   decimal - decimal         decimal     
   decimal - int             decimal     
   float - float             float       
   inet - inet               int         
   inet - int                inet        
   int - decimal             decimal     
   int - int                 int         
   interval - interval       interval    
   jsonb - int               jsonb       
   jsonb - string            jsonb       
   jsonb - string[]          jsonb       
   time - interval           time        
   time - time               interval    
   timestamp - interval      timestamp   
   timestamp - timestamp     interval    
   timestamp - timestamptz   interval    
   timestamptz - interval    timestamptz 
   timestamptz - timestamp   interval    
   timestamptz - timestamptz interval    
   timetz - interval         timetz      

   ->              Return 
   jsonb -> int    jsonb  
   jsonb -> string jsonb  

   ->>              Return 
   jsonb ->> int    string 
   jsonb ->> string string 

   /                 Return   
   decimal / decimal decimal  
   decimal / int     decimal  
   float / float     float    
   int / decimal     decimal  
   int / int         decimal  
   interval / float  interval 
   interval / int    interval 

   //                 Return  
   decimal // decimal decimal 
   decimal // int     decimal 
   float // float     float   
   int // decimal     decimal 
   int // int         int     

   <                               Return 
   bool < bool                     bool   
   bool[] < bool[]                 bool   
   bytes < bytes                   bool   
   bytes[] < bytes[]               bool   
   collatedstring < collatedstring bool   
   date < date                     bool   
   date < timestamp                bool   
   date < timestamptz              bool   
   date[] < date[]                 bool   
   decimal < decimal               bool   
   decimal < float                 bool   
   decimal < int                   bool   
   decimal[] < decimal[]           bool   
   float < decimal                 bool   
   float < float                   bool   
   float < int                     bool   
   float[] < float[]               bool   
   geography < geography           bool   
   geometry < geometry             bool   
   inet < inet                     bool   
   inet[] < inet[]                 bool   
   int < decimal                   bool   
   int < float                     bool   
   int < int                       bool   
   int[] < int[]                   bool   
   interval < interval             bool   
   interval[] < interval[]         bool   
   jsonb < jsonb                   bool   
   oid < oid                       bool   
   string < string                 bool   
   string[] < string[]             bool   
   time < time                     bool   
   time < timetz                   bool   
   time[] < time[]                 bool   
   timestamp < date                bool   
   timestamp < timestamp           bool   
   timestamp < timestamptz         bool   
   timestamp[] < timestamp[]       bool   
   timestamptz < date              bool   
   timestamptz < timestamp         bool   
   timestamptz < timestamptz       bool   
   timestamptz < timestamptz       bool   
   timetz < time                   bool   
   timetz < timetz                 bool   
   tuple < tuple                   bool   
   uuid < uuid                     bool   
   uuid[] < uuid[]                 bool   
   varbit < varbit                 bool   

   <<            Return 
   inet << inet  bool   
   int << int    int    
   varbit << int varbit 

   <=                               Return 
   bool <= bool                     bool   
   bool[] <= bool[]                 bool   
   bytes <= bytes                   bool   
   bytes[] <= bytes[]               bool   
   collatedstring <= collatedstring bool   
   date <= date                     bool   
   date <= timestamp                bool   
   date <= timestamptz              bool   
   date[] <= date[]                 bool   
   decimal <= decimal               bool   
   decimal <= float                 bool   
   decimal <= int                   bool   
   decimal[] <= decimal[]           bool   
   float <= decimal                 bool   
   float <= float                   bool   
   float <= int                     bool   
   float[] <= float[]               bool   
   geography <= geography           bool   
   geometry <= geometry             bool   
   inet <= inet                     bool   
   inet[] <= inet[]                 bool   
   int <= decimal                   bool   
   int <= float                     bool   
   int <= int                       bool   
   int[] <= int[]                   bool   
   interval <= interval             bool   
   interval[] <= interval[]         bool   
   jsonb <= jsonb                   bool   
   oid <= oid                       bool   
   string <= string                 bool   
   string[] <= string[]             bool   
   time <= time                     bool   
   time <= timetz                   bool   
   time[] <= time[]                 bool   
   timestamp <= date                bool   
   timestamp <= timestamp           bool   
   timestamp <= timestamptz         bool   
   timestamp[] <= timestamp[]       bool   
   timestamptz <= date              bool   
   timestamptz <= timestamp         bool   
   timestamptz <= timestamptz       bool   
   timestamptz <= timestamptz       bool   
   timetz <= time                   bool   
   timetz <= timetz                 bool   
   tuple <= tuple                   bool   
   uuid <= uuid                     bool   
   uuid[] <= uuid[]                 bool   
   varbit <= varbit                 bool   

   <@                       Return 
   anyelement <@ anyelement bool   
   jsonb <@ jsonb           bool   

   =                               Return 
   bool = bool                     bool   
   bool[] = bool[]                 bool   
   bytes = bytes                   bool   
   bytes[] = bytes[]               bool   
   collatedstring = collatedstring bool   
   date = date                     bool   
   date = timestamp                bool   
   date = timestamptz              bool   
   date[] = date[]                 bool   
   decimal = decimal               bool   
   decimal = float                 bool   
   decimal = int                   bool   
   decimal[] = decimal[]           bool   
   float = decimal                 bool   
   float = float                   bool   
   float = int                     bool   
   float[] = float[]               bool   
   geography = geography           bool   
   geometry = geometry             bool   
   inet = inet                     bool   
   inet[] = inet[]                 bool   
   int = decimal                   bool   
   int = float                     bool   
   int = int                       bool   
   int[] = int[]                   bool   
   interval = interval             bool   
   interval[] = interval[]         bool   
   jsonb = jsonb                   bool   
   oid = oid                       bool   
   string = string                 bool   
   string[] = string[]             bool   
   time = time                     bool   
   time = timetz                   bool   
   time[] = time[]                 bool   
   timestamp = date                bool   
   timestamp = timestamp           bool   
   timestamp = timestamptz         bool   
   timestamp[] = timestamp[]       bool   
   timestamptz = date              bool   
   timestamptz = timestamp         bool   
   timestamptz = timestamptz       bool   
   timestamptz = timestamptz       bool   
   timetz = time                   bool   
   timetz = timetz                 bool   
   tuple = tuple                   bool   
   uuid = uuid                     bool   
   uuid[] = uuid[]                 bool   
   varbit = varbit                 bool   

   >>            Return 
   inet >> inet  bool   
   int >> int    int    
   varbit >> int varbit 

   ?              Return 
   jsonb ? string bool   

   ?&                Return 
   jsonb ?& string[] bool   

   ?|                Return 
   jsonb ?| string[] bool   

   @>                       Return 
   anyelement @> anyelement bool   
   jsonb @> jsonb           bool   

   ILIKE               Return 
   string ILIKE string bool   

   IN                      Return 
   anyenum IN tuple        bool   
   bool IN tuple           bool   
   bytes IN tuple          bool   
   collatedstring IN tuple bool   
   date IN tuple           bool   
   decimal IN tuple        bool   
   float IN tuple          bool   
   geography IN tuple      bool   
   geometry IN tuple       bool   
   inet IN tuple           bool   
   int IN tuple            bool   
   interval IN tuple       bool   
   jsonb IN tuple          bool   
   oid IN tuple            bool   
   string IN tuple         bool   
   time IN tuple           bool   
   timestamp IN tuple      bool   
   timestamptz IN tuple    bool   
   timetz IN tuple         bool   
   tuple IN tuple          bool   
   uuid IN tuple           bool   
   varbit IN tuple         bool   

   IS NOT DISTINCT FROM                               Return 
   anyenum IS NOT DISTINCT FROM anyenum               bool   
   bool IS NOT DISTINCT FROM bool                     bool   
   bool[] IS NOT DISTINCT FROM bool[]                 bool   
   bytes IS NOT DISTINCT FROM bytes                   bool   
   bytes[] IS NOT DISTINCT FROM bytes[]               bool   
   collatedstring IS NOT DISTINCT FROM collatedstring bool   
   date IS NOT DISTINCT FROM date                     bool   
   date IS NOT DISTINCT FROM timestamp                bool   
   date IS NOT DISTINCT FROM timestamptz              bool   
   date[] IS NOT DISTINCT FROM date[]                 bool   
   decimal IS NOT DISTINCT FROM decimal               bool   
   decimal IS NOT DISTINCT FROM float                 bool   
   decimal IS NOT DISTINCT FROM int                   bool   
   decimal[] IS NOT DISTINCT FROM decimal[]           bool   
   float IS NOT DISTINCT FROM decimal                 bool   
   float IS NOT DISTINCT FROM float                   bool   
   float IS NOT DISTINCT FROM int                     bool   
   float[] IS NOT DISTINCT FROM float[]               bool   
   geography IS NOT DISTINCT FROM geography           bool   
   geometry IS NOT DISTINCT FROM geometry             bool   
   inet IS NOT DISTINCT FROM inet                     bool   
   inet[] IS NOT DISTINCT FROM inet[]                 bool   
   int IS NOT DISTINCT FROM decimal                   bool   
   int IS NOT DISTINCT FROM float                     bool   
   int IS NOT DISTINCT FROM int                       bool   
   int[] IS NOT DISTINCT FROM int[]                   bool   
   interval IS NOT DISTINCT FROM interval             bool   
   interval[] IS NOT DISTINCT FROM interval[]         bool   
   jsonb IS NOT DISTINCT FROM jsonb                   bool   
   oid IS NOT DISTINCT FROM oid                       bool   
   string IS NOT DISTINCT FROM string                 bool   
   string[] IS NOT DISTINCT FROM string[]             bool   
   time IS NOT DISTINCT FROM time                     bool   
   time IS NOT DISTINCT FROM timetz                   bool   
   time[] IS NOT DISTINCT FROM time[]                 bool   
   timestamp IS NOT DISTINCT FROM date                bool   
   timestamp IS NOT DISTINCT FROM timestamp           bool   
   timestamp IS NOT DISTINCT FROM timestamptz         bool   
   timestamp[] IS NOT DISTINCT FROM timestamp[]       bool   
   timestamptz IS NOT DISTINCT FROM date              bool   
   timestamptz IS NOT DISTINCT FROM timestamp         bool   
   timestamptz IS NOT DISTINCT FROM timestamptz       bool   
   timestamptz IS NOT DISTINCT FROM timestamptz       bool   
   timetz IS NOT DISTINCT FROM time                   bool   
   timetz IS NOT DISTINCT FROM timetz                 bool   
   tuple IS NOT DISTINCT FROM tuple                   bool   
   unknown IS NOT DISTINCT FROM unknown               bool   
   uuid IS NOT DISTINCT FROM uuid                     bool   
   uuid[] IS NOT DISTINCT FROM uuid[]                 bool   
   varbit IS NOT DISTINCT FROM varbit                 bool   

   LIKE               Return 
   string LIKE string bool   

   SIMILAR TO               Return 
   string SIMILAR TO string bool   

   ^                 Return  
   decimal ^ decimal decimal 
   decimal ^ int     decimal 
   float ^ float     float   
   int ^ decimal     decimal 
   int ^ int         int     

   |               Return 
   inet | inet     inet   
   int | int       int    
   varbit | varbit varbit 

   |/        Return  
   |/decimal decimal 
   |/float   float   

   ||                         Return      
   bool || bool[]             bool[]      
   bool[] || bool             bool[]      
   bool[] || bool[]           bool[]      
   bytes || bytes             bytes       
   bytes || bytes[]           bytes[]     
   bytes[] || bytes           bytes[]     
   bytes[] || bytes[]         bytes[]     
   date || date[]             date[]      
   date[] || date             date[]      
   date[] || date[]           date[]      
   decimal || decimal[]       decimal[]   
   decimal[] || decimal       decimal[]   
   decimal[] || decimal[]     decimal[]   
   float || float[]           float[]     
   float[] || float           float[]     
   float[] || float[]         float[]     
   geography || geography     geography   
   geometry || geometry       geometry    
   inet || inet[]             inet[]      
   inet[] || inet             inet[]      
   inet[] || inet[]           inet[]      
   int || int[]               int[]       
   int[] || int               int[]       
   int[] || int[]             int[]       
   interval || interval[]     interval[]  
   interval[] || interval     interval[]  
   interval[] || interval[]   interval[]  
   jsonb || jsonb             jsonb       
   oid || oid                 oid         
   string || string           string      
   string || string[]         string[]    
   string[] || string         string[]    
   string[] || string[]       string[]    
   time || time[]             time[]      
   time[] || time             time[]      
   time[] || time[]           time[]      
   timestamp || timestamp[]   timestamp[] 
   timestamp[] || timestamp   timestamp[] 
   timestamp[] || timestamp[] timestamp[] 
   timestamptz || timestamptz timestamptz 
   timestamptz || timestamptz timestamptz 
   timestamptz || timestamptz timestamptz 
   timetz || timetz           timetz      
   uuid || uuid[]             uuid[]      
   uuid[] || uuid             uuid[]      
   uuid[] || uuid[]           uuid[]      
   varbit || varbit           varbit      

   ||/        Return  
   ||/decimal decimal 
   ||/float   float   

   ~               Return 
   ~inet           inet   
   ~int            int    
   ~varbit         varbit 
   string ~ string bool   

   ~*               Return 
   string ~* string bool   

   Was this page helpful?

   Yes No
     * Product
          * CockroachDB
          * CockroachCloud
          * Compare
          * Pricing
          * What's New
          * Get CockroachDB
          * Sign In
     * Resources
          * Guides
          * Videos & Webinars
          * Architecture Overview
          * FAQ
          * Security
     * Learn
          * Docs
          * University
     * Support Channels
          * Forum
          * Slack
          * Support Portal
          * Contact Us
     * Company
          * About
          * Blog
          * Careers
          * Customers
          * Events
          * News
          * Privacy
   © 2020 Cockroach Labs
   Thank you for downloading CockroachDB
   Keep up-to-date with CockroachDB software releases and usage best
   practices
   Keep up-to-date with CockroachDB software releases and usage best
   practices
