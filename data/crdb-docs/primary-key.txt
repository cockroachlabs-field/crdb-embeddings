   Link: canonical
   Cockroach Labs
   Products
   Products CockroachDB CockroachCloud Compare Products Pricing
   Capabilities SQL Scale Resilience Geo-Partitioning Cloud Native
   Customers
   Learn
   Docs University
   Resources
   Guides Videos & Webinars Partners Forum
   Blog Get CockroachDB Contact Us
   Cockroach Labs
   Products
   Products CockroachDB CockroachCloud Compare Products Pricing
   Capabilities SQL Scale Resilience Geo-Partitioning Cloud Native
   Customers
   Learn
   Docs University
   Resources
   Guides Videos & Webinars Partners Forum
   Blog Get CockroachDB Contact Us

                             Primary Key constraint

   Contribute 
     * Edit This Page
     * Report Doc Issue
     * Suggest New Content

   The PRIMARY KEY constraint specifies that the constrained columns' values
   must uniquely identify each row.

   Unlike other constraints which have very specific uses, the PRIMARY KEY
   constraint must be used for every table because it provides an intrinsic
   structure to the table's data. This both makes it easier to understand, as
   well as improving query performance.

   A table's primary key should be explicitly defined in the CREATE TABLE
   statement.

   You can change the primary key of an existing table with an ALTER TABLE
   ... ALTER PRIMARY KEY statement, or by using DROP CONSTRAINT and then ADD
   CONSTRAINT in the same transaction. For more information, see Details.

Details

     * Tables can only have one primary key.
     * To ensure each row has a unique identifier, the PRIMARY KEY constraint
       combines the properties of both the UNIQUE and NOT NULL constraints.
       The properties of both constraints are necessary to make sure each
       row's primary key columns contain distinct sets of values.

          * The properties of the UNIQUE constraint ensure that each value is
            distinct from all other values.
          * However, because NULL values never equal other NULL values, the
            UNIQUE constraint is not enough (two rows can appear the same if
            one of the values is NULL). To prevent the appearance of
            duplicated values, the PRIMARY KEY constraint also enforces the
            properties of the Not Null constraint.
     * The columns in the PRIMARY KEY constraint are used to create its
       primary index, which CockroachDB uses by default to access the table's
       data.

       This index does not take up additional disk space (unlike secondary
       indexes, which do) because CockroachDB uses the primary index to
       structure the table's data in the key-value layer. For more
       information, see our blog post SQL in CockroachDB: Mapping Table Data
       to Key-Value Storage.

     * For optimal performance, we recommend defining a primary key for every
       table.

       If you create a table without defining a primary key, CockroachDB uses
       a unique identifier for each row, which it then uses for the primary
       index. Because you cannot meaningfully use this unique row identifier
       column to filter table data, it does not offer any performance
       optimization. This means you will always have improved performance by
       defining a primary key for a table. For more information, see our blog
       post Index Selection in CockroachDB.

     * You can change the primary key of an existing table by doing one of
       the following:

          * Issuing an ALTER TABLE ... ALTER PRIMARY KEY statement. When you
            change a primary key with ALTER PRIMARY KEY, the old primary key
            index becomes a secondary index. This helps optimize the
            performance of queries that still filter on the old primary key
            column.
          * Issuing an ALTER TABLE ... DROP CONSTRAINT ... PRIMARY KEY
            statement to drop the primary key, followed by an ALTER TABLE ...
            ADD CONSTRAINT ... PRIMARY KEY statement, in the same
            transaction, to add a new primary key. This replaces the existing
            primary key without creating a secondary index from the old
            primary key. For examples, see the ADD CONSTRAINT and DROP
            CONSTRAINT pages.

   Note:
   You can use an ADD CONSTRAINT ... PRIMARY KEY statement without a DROP
   CONSTRAINT ... PRIMARY KEY if the primary key was not explicitly defined
   at table creation, and the current primary key is on rowid.

Syntax

   PRIMARY KEY constraints can be defined at the table level. However, if you
   only want the constraint to apply to a single column, it can be applied at
   the column level.

  Column level

   CREATE TABLE table_name ( column_name column_type PRIMARY KEY
   column_constraints , column_def table_constraints ) )

   Parameter          Description                                             
   table_name         The name of the table you're creating.                  
   column_name        The name of the Primary Key column.                     
   column_type        The Primary Key column's data type.                     
   column_constraints Any other column-level constraints you want to apply to 
                      this column.                                            
   column_def         Definitions for any other columns in the table.         
   table_constraints  Any table-level constraints you want to apply.          

   Example

   copy

 > CREATE TABLE orders (
     order_id        INT PRIMARY KEY,
     order_date      TIMESTAMP NOT NULL,
     order_mode      STRING(8),
     customer_id     INT,
     order_status    INT
   );

  Table level

   CREATE TABLE table_name ( column_def , CONSTRAINT name PRIMARY KEY (
   column_name , ) table_constraints )

   Parameter         Description                                              
   table_name        The name of the table you're creating.                   
   column_def        Definitions for any other columns in the table.          
                     The name you want to use for the constraint, which must  
   name              be unique to its table and follow these identifier       
                     rules.                                                   
                     The name of the column you want to use as the PRIMARY    
                     KEY.                                                     
   column_name                                                                
                     The order in which you list columns here affects the     
                     structure of the primary index.                          
   table_constraints Any other table-level constraints you want to apply.     

   Example

   copy

 > CREATE TABLE IF NOT EXISTS inventories (
     product_id        INT,
     warehouse_id      INT,
     quantity_on_hand  INT NOT NULL,
     PRIMARY KEY (product_id, warehouse_id)
   );

Usage example

   copy

 > CREATE TABLE IF NOT EXISTS inventories (
     product_id        INT,
     warehouse_id      INT,
     quantity_on_hand  INT NOT NULL,
     PRIMARY KEY (product_id, warehouse_id)
   );

   copy

 > INSERT INTO inventories VALUES (1, 1, 100);

   copy

 > INSERT INTO inventories VALUES (1, 1, 200);

 pq: duplicate key value (product_id,warehouse_id)=(1,1) violates unique constraint "primary"

   copy

 > INSERT INTO inventories VALUES (1, NULL, 100);

 pq: null value in column "warehouse_id" violates not-null constraint

See also

     * Constraints
     * CHECK constraint
     * DEFAULT constraint
     * REFERENCES constraint (Foreign Key)
     * PRIMARY KEY constraint
     * NOT NULL constraint
     * UNIQUE constraint
     * SHOW CONSTRAINTS
     * ALTER PRIMARY KEY
     * ALTER TABLE

   Was this page helpful?

   Yes No
     * Product
          * CockroachDB
          * CockroachCloud
          * Compare
          * Pricing
          * What's New
          * Get CockroachDB
          * Sign In
     * Resources
          * Guides
          * Videos & Webinars
          * Architecture Overview
          * FAQ
          * Security
     * Learn
          * Docs
          * University
     * Support Channels
          * Forum
          * Slack
          * Support Portal
          * Contact Us
     * Company
          * About
          * Blog
          * Careers
          * Customers
          * Events
          * News
          * Privacy
   Â© 2020 Cockroach Labs
   Thank you for downloading CockroachDB
   Keep up-to-date with CockroachDB software releases and usage best
   practices
   Keep up-to-date with CockroachDB software releases and usage best
   practices
